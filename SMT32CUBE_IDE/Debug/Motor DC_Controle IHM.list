
Motor DC_Controle IHM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003458  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08003564  08003564  00013564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003698  08003698  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003698  08003698  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003698  08003698  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003698  08003698  00013698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800369c  0800369c  0001369c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080036a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  2000005c  080036fc  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  080036fc  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006251  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001499  00000000  00000000  00026319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000758  00000000  00000000  000277b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000598  00000000  00000000  00027f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016d5e  00000000  00000000  000284a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009a2f  00000000  00000000  0003f206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082399  00000000  00000000  00048c35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000021ec  00000000  00000000  000cafd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  000cd1bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800354c 	.word	0x0800354c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	0800354c 	.word	0x0800354c

0800014c <LCD_Cursor>:
 *  @return None
 *
 ******************************************************************************/

void LCD_Cursor(uint8_t x, uint8_t y)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	460a      	mov	r2, r1
 8000156:	71fb      	strb	r3, [r7, #7]
 8000158:	4613      	mov	r3, r2
 800015a:	71bb      	strb	r3, [r7, #6]
	uint8_t temp;

	if (x == 0)
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	2b00      	cmp	r3, #0
 8000160:	d102      	bne.n	8000168 <LCD_Cursor+0x1c>
		temp = 0x80;
 8000162:	2380      	movs	r3, #128	; 0x80
 8000164:	73fb      	strb	r3, [r7, #15]
 8000166:	e001      	b.n	800016c <LCD_Cursor+0x20>
	else
		temp = 0xC0;
 8000168:	23c0      	movs	r3, #192	; 0xc0
 800016a:	73fb      	strb	r3, [r7, #15]

	temp = temp + y;
 800016c:	7bfa      	ldrb	r2, [r7, #15]
 800016e:	79bb      	ldrb	r3, [r7, #6]
 8000170:	4413      	add	r3, r2
 8000172:	73fb      	strb	r3, [r7, #15]

	LCD_Cmd(temp);
 8000174:	7bfb      	ldrb	r3, [r7, #15]
 8000176:	4618      	mov	r0, r3
 8000178:	f000 f8aa 	bl	80002d0 <LCD_Cmd>


}
 800017c:	bf00      	nop
 800017e:	3710      	adds	r7, #16
 8000180:	46bd      	mov	sp, r7
 8000182:	bd80      	pop	{r7, pc}

08000184 <LCD_Data>:
*
*  @return  None
*
******************************************************************************/
void LCD_Data(uint8_t data)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	71fb      	strb	r3, [r7, #7]
	RS_GPIO_Port->BSRR = RS_Pin;
 800018e:	4b44      	ldr	r3, [pc, #272]	; (80002a0 <LCD_Data+0x11c>)
 8000190:	2208      	movs	r2, #8
 8000192:	611a      	str	r2, [r3, #16]
	if (data & 0x80)
 8000194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000198:	2b00      	cmp	r3, #0
 800019a:	da03      	bge.n	80001a4 <LCD_Data+0x20>
		D7_GPIO_Port->BSRR = D7_Pin;
 800019c:	4b40      	ldr	r3, [pc, #256]	; (80002a0 <LCD_Data+0x11c>)
 800019e:	2280      	movs	r2, #128	; 0x80
 80001a0:	611a      	str	r2, [r3, #16]
 80001a2:	e003      	b.n	80001ac <LCD_Data+0x28>
	else
		D7_GPIO_Port->BSRR = (uint32_t) D7_Pin << 16u;
 80001a4:	4b3e      	ldr	r3, [pc, #248]	; (80002a0 <LCD_Data+0x11c>)
 80001a6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80001aa:	611a      	str	r2, [r3, #16]
	if (data & 0x40)
 80001ac:	79fb      	ldrb	r3, [r7, #7]
 80001ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d003      	beq.n	80001be <LCD_Data+0x3a>
		D6_GPIO_Port->BSRR = D6_Pin;
 80001b6:	4b3a      	ldr	r3, [pc, #232]	; (80002a0 <LCD_Data+0x11c>)
 80001b8:	2240      	movs	r2, #64	; 0x40
 80001ba:	611a      	str	r2, [r3, #16]
 80001bc:	e003      	b.n	80001c6 <LCD_Data+0x42>
	else
		D6_GPIO_Port->BSRR = (uint32_t) D6_Pin << 16u;
 80001be:	4b38      	ldr	r3, [pc, #224]	; (80002a0 <LCD_Data+0x11c>)
 80001c0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80001c4:	611a      	str	r2, [r3, #16]
	if (data & 0x20)
 80001c6:	79fb      	ldrb	r3, [r7, #7]
 80001c8:	f003 0320 	and.w	r3, r3, #32
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d003      	beq.n	80001d8 <LCD_Data+0x54>
		D5_GPIO_Port->BSRR = D5_Pin;
 80001d0:	4b33      	ldr	r3, [pc, #204]	; (80002a0 <LCD_Data+0x11c>)
 80001d2:	2220      	movs	r2, #32
 80001d4:	611a      	str	r2, [r3, #16]
 80001d6:	e003      	b.n	80001e0 <LCD_Data+0x5c>
	else
		D5_GPIO_Port->BSRR = (uint32_t) D5_Pin << 16u;
 80001d8:	4b31      	ldr	r3, [pc, #196]	; (80002a0 <LCD_Data+0x11c>)
 80001da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80001de:	611a      	str	r2, [r3, #16]
	if (data & 0x10)
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	f003 0310 	and.w	r3, r3, #16
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d003      	beq.n	80001f2 <LCD_Data+0x6e>
		D4_GPIO_Port->BSRR = D4_Pin;
 80001ea:	4b2d      	ldr	r3, [pc, #180]	; (80002a0 <LCD_Data+0x11c>)
 80001ec:	2210      	movs	r2, #16
 80001ee:	611a      	str	r2, [r3, #16]
 80001f0:	e003      	b.n	80001fa <LCD_Data+0x76>
	else
		D4_GPIO_Port->BSRR = (uint32_t) D4_Pin << 16u;
 80001f2:	4b2b      	ldr	r3, [pc, #172]	; (80002a0 <LCD_Data+0x11c>)
 80001f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80001f8:	611a      	str	r2, [r3, #16]

	EN_GPIO_Port->BSRR = EN_Pin;
 80001fa:	4b29      	ldr	r3, [pc, #164]	; (80002a0 <LCD_Data+0x11c>)
 80001fc:	2201      	movs	r2, #1
 80001fe:	611a      	str	r2, [r3, #16]
	HAL_Delay(1);
 8000200:	2001      	movs	r0, #1
 8000202:	f001 f98d 	bl	8001520 <HAL_Delay>
	EN_GPIO_Port->BSRR = (uint32_t) EN_Pin << 16u;
 8000206:	4b26      	ldr	r3, [pc, #152]	; (80002a0 <LCD_Data+0x11c>)
 8000208:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800020c:	611a      	str	r2, [r3, #16]
	HAL_Delay(1);
 800020e:	2001      	movs	r0, #1
 8000210:	f001 f986 	bl	8001520 <HAL_Delay>

	if (data & 0x08)
 8000214:	79fb      	ldrb	r3, [r7, #7]
 8000216:	f003 0308 	and.w	r3, r3, #8
 800021a:	2b00      	cmp	r3, #0
 800021c:	d003      	beq.n	8000226 <LCD_Data+0xa2>
		D7_GPIO_Port->BSRR = D7_Pin;
 800021e:	4b20      	ldr	r3, [pc, #128]	; (80002a0 <LCD_Data+0x11c>)
 8000220:	2280      	movs	r2, #128	; 0x80
 8000222:	611a      	str	r2, [r3, #16]
 8000224:	e003      	b.n	800022e <LCD_Data+0xaa>
	else
		D7_GPIO_Port->BSRR = (uint32_t) D7_Pin << 16u;
 8000226:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <LCD_Data+0x11c>)
 8000228:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800022c:	611a      	str	r2, [r3, #16]
	if (data & 0x04)
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	f003 0304 	and.w	r3, r3, #4
 8000234:	2b00      	cmp	r3, #0
 8000236:	d003      	beq.n	8000240 <LCD_Data+0xbc>
		D6_GPIO_Port->BSRR = D6_Pin;
 8000238:	4b19      	ldr	r3, [pc, #100]	; (80002a0 <LCD_Data+0x11c>)
 800023a:	2240      	movs	r2, #64	; 0x40
 800023c:	611a      	str	r2, [r3, #16]
 800023e:	e003      	b.n	8000248 <LCD_Data+0xc4>
	else
		D6_GPIO_Port->BSRR = (uint32_t) D6_Pin << 16u;
 8000240:	4b17      	ldr	r3, [pc, #92]	; (80002a0 <LCD_Data+0x11c>)
 8000242:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000246:	611a      	str	r2, [r3, #16]
	if (data & 0x02)
 8000248:	79fb      	ldrb	r3, [r7, #7]
 800024a:	f003 0302 	and.w	r3, r3, #2
 800024e:	2b00      	cmp	r3, #0
 8000250:	d003      	beq.n	800025a <LCD_Data+0xd6>
		D5_GPIO_Port->BSRR = D5_Pin;
 8000252:	4b13      	ldr	r3, [pc, #76]	; (80002a0 <LCD_Data+0x11c>)
 8000254:	2220      	movs	r2, #32
 8000256:	611a      	str	r2, [r3, #16]
 8000258:	e003      	b.n	8000262 <LCD_Data+0xde>
	else
		D5_GPIO_Port->BSRR = (uint32_t) D5_Pin << 16u;
 800025a:	4b11      	ldr	r3, [pc, #68]	; (80002a0 <LCD_Data+0x11c>)
 800025c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000260:	611a      	str	r2, [r3, #16]
	if (data & 0x01)
 8000262:	79fb      	ldrb	r3, [r7, #7]
 8000264:	f003 0301 	and.w	r3, r3, #1
 8000268:	2b00      	cmp	r3, #0
 800026a:	d003      	beq.n	8000274 <LCD_Data+0xf0>
		D4_GPIO_Port->BSRR = D4_Pin;
 800026c:	4b0c      	ldr	r3, [pc, #48]	; (80002a0 <LCD_Data+0x11c>)
 800026e:	2210      	movs	r2, #16
 8000270:	611a      	str	r2, [r3, #16]
 8000272:	e003      	b.n	800027c <LCD_Data+0xf8>
	else
		D4_GPIO_Port->BSRR = (uint32_t) D4_Pin << 16u;
 8000274:	4b0a      	ldr	r3, [pc, #40]	; (80002a0 <LCD_Data+0x11c>)
 8000276:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800027a:	611a      	str	r2, [r3, #16]

	EN_GPIO_Port->BSRR = EN_Pin;
 800027c:	4b08      	ldr	r3, [pc, #32]	; (80002a0 <LCD_Data+0x11c>)
 800027e:	2201      	movs	r2, #1
 8000280:	611a      	str	r2, [r3, #16]
	HAL_Delay(1);
 8000282:	2001      	movs	r0, #1
 8000284:	f001 f94c 	bl	8001520 <HAL_Delay>
	EN_GPIO_Port->BSRR = (uint32_t) EN_Pin << 16u;
 8000288:	4b05      	ldr	r3, [pc, #20]	; (80002a0 <LCD_Data+0x11c>)
 800028a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800028e:	611a      	str	r2, [r3, #16]
	HAL_Delay(1);
 8000290:	2001      	movs	r0, #1
 8000292:	f001 f945 	bl	8001520 <HAL_Delay>
}
 8000296:	bf00      	nop
 8000298:	3708      	adds	r7, #8
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	40010800 	.word	0x40010800

080002a4 <LCD_String>:
*
*  @param1 String to be sended.
*
******************************************************************************/
void LCD_String(char *string)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	while (*string)
 80002ac:	e007      	b.n	80002be <LCD_String+0x1a>
	{
		LCD_Data(*string);
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	4618      	mov	r0, r3
 80002b4:	f7ff ff66 	bl	8000184 <LCD_Data>
		string++;
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	3301      	adds	r3, #1
 80002bc:	607b      	str	r3, [r7, #4]
	while (*string)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d1f3      	bne.n	80002ae <LCD_String+0xa>
	}
}
 80002c6:	bf00      	nop
 80002c8:	bf00      	nop
 80002ca:	3708      	adds	r7, #8
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <LCD_Cmd>:
*
*  @return None.
*
******************************************************************************/
void LCD_Cmd(uint8_t cmd)  // Fun��o para enviar um comando para o Display
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 80002da:	2200      	movs	r2, #0
 80002dc:	2108      	movs	r1, #8
 80002de:	4853      	ldr	r0, [pc, #332]	; (800042c <LCD_Cmd+0x15c>)
 80002e0:	f001 fbc1 	bl	8001a66 <HAL_GPIO_WritePin>

	if (cmd & 0x80)
 80002e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	da05      	bge.n	80002f8 <LCD_Cmd+0x28>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 80002ec:	2201      	movs	r2, #1
 80002ee:	2180      	movs	r1, #128	; 0x80
 80002f0:	484e      	ldr	r0, [pc, #312]	; (800042c <LCD_Cmd+0x15c>)
 80002f2:	f001 fbb8 	bl	8001a66 <HAL_GPIO_WritePin>
 80002f6:	e004      	b.n	8000302 <LCD_Cmd+0x32>
	else
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	2180      	movs	r1, #128	; 0x80
 80002fc:	484b      	ldr	r0, [pc, #300]	; (800042c <LCD_Cmd+0x15c>)
 80002fe:	f001 fbb2 	bl	8001a66 <HAL_GPIO_WritePin>
	if (cmd & 0x40)
 8000302:	79fb      	ldrb	r3, [r7, #7]
 8000304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000308:	2b00      	cmp	r3, #0
 800030a:	d005      	beq.n	8000318 <LCD_Cmd+0x48>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 800030c:	2201      	movs	r2, #1
 800030e:	2140      	movs	r1, #64	; 0x40
 8000310:	4846      	ldr	r0, [pc, #280]	; (800042c <LCD_Cmd+0x15c>)
 8000312:	f001 fba8 	bl	8001a66 <HAL_GPIO_WritePin>
 8000316:	e004      	b.n	8000322 <LCD_Cmd+0x52>
	else
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 8000318:	2200      	movs	r2, #0
 800031a:	2140      	movs	r1, #64	; 0x40
 800031c:	4843      	ldr	r0, [pc, #268]	; (800042c <LCD_Cmd+0x15c>)
 800031e:	f001 fba2 	bl	8001a66 <HAL_GPIO_WritePin>
	if (cmd & 0x20)
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	f003 0320 	and.w	r3, r3, #32
 8000328:	2b00      	cmp	r3, #0
 800032a:	d005      	beq.n	8000338 <LCD_Cmd+0x68>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 800032c:	2201      	movs	r2, #1
 800032e:	2120      	movs	r1, #32
 8000330:	483e      	ldr	r0, [pc, #248]	; (800042c <LCD_Cmd+0x15c>)
 8000332:	f001 fb98 	bl	8001a66 <HAL_GPIO_WritePin>
 8000336:	e004      	b.n	8000342 <LCD_Cmd+0x72>
	else
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 8000338:	2200      	movs	r2, #0
 800033a:	2120      	movs	r1, #32
 800033c:	483b      	ldr	r0, [pc, #236]	; (800042c <LCD_Cmd+0x15c>)
 800033e:	f001 fb92 	bl	8001a66 <HAL_GPIO_WritePin>
	if (cmd & 0x10)
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	f003 0310 	and.w	r3, r3, #16
 8000348:	2b00      	cmp	r3, #0
 800034a:	d005      	beq.n	8000358 <LCD_Cmd+0x88>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 800034c:	2201      	movs	r2, #1
 800034e:	2110      	movs	r1, #16
 8000350:	4836      	ldr	r0, [pc, #216]	; (800042c <LCD_Cmd+0x15c>)
 8000352:	f001 fb88 	bl	8001a66 <HAL_GPIO_WritePin>
 8000356:	e004      	b.n	8000362 <LCD_Cmd+0x92>
	else
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000358:	2200      	movs	r2, #0
 800035a:	2110      	movs	r1, #16
 800035c:	4833      	ldr	r0, [pc, #204]	; (800042c <LCD_Cmd+0x15c>)
 800035e:	f001 fb82 	bl	8001a66 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 8000362:	2201      	movs	r2, #1
 8000364:	2101      	movs	r1, #1
 8000366:	4831      	ldr	r0, [pc, #196]	; (800042c <LCD_Cmd+0x15c>)
 8000368:	f001 fb7d 	bl	8001a66 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800036c:	2001      	movs	r0, #1
 800036e:	f001 f8d7 	bl	8001520 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000372:	2200      	movs	r2, #0
 8000374:	2101      	movs	r1, #1
 8000376:	482d      	ldr	r0, [pc, #180]	; (800042c <LCD_Cmd+0x15c>)
 8000378:	f001 fb75 	bl	8001a66 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800037c:	2001      	movs	r0, #1
 800037e:	f001 f8cf 	bl	8001520 <HAL_Delay>

	if (cmd & 0x08)
 8000382:	79fb      	ldrb	r3, [r7, #7]
 8000384:	f003 0308 	and.w	r3, r3, #8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d005      	beq.n	8000398 <LCD_Cmd+0xc8>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 800038c:	2201      	movs	r2, #1
 800038e:	2180      	movs	r1, #128	; 0x80
 8000390:	4826      	ldr	r0, [pc, #152]	; (800042c <LCD_Cmd+0x15c>)
 8000392:	f001 fb68 	bl	8001a66 <HAL_GPIO_WritePin>
 8000396:	e004      	b.n	80003a2 <LCD_Cmd+0xd2>
	else
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	2180      	movs	r1, #128	; 0x80
 800039c:	4823      	ldr	r0, [pc, #140]	; (800042c <LCD_Cmd+0x15c>)
 800039e:	f001 fb62 	bl	8001a66 <HAL_GPIO_WritePin>
	if (cmd & 0x04)
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	f003 0304 	and.w	r3, r3, #4
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d005      	beq.n	80003b8 <LCD_Cmd+0xe8>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	2140      	movs	r1, #64	; 0x40
 80003b0:	481e      	ldr	r0, [pc, #120]	; (800042c <LCD_Cmd+0x15c>)
 80003b2:	f001 fb58 	bl	8001a66 <HAL_GPIO_WritePin>
 80003b6:	e004      	b.n	80003c2 <LCD_Cmd+0xf2>
	else
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 80003b8:	2200      	movs	r2, #0
 80003ba:	2140      	movs	r1, #64	; 0x40
 80003bc:	481b      	ldr	r0, [pc, #108]	; (800042c <LCD_Cmd+0x15c>)
 80003be:	f001 fb52 	bl	8001a66 <HAL_GPIO_WritePin>
	if (cmd & 0x02)
 80003c2:	79fb      	ldrb	r3, [r7, #7]
 80003c4:	f003 0302 	and.w	r3, r3, #2
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d005      	beq.n	80003d8 <LCD_Cmd+0x108>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 80003cc:	2201      	movs	r2, #1
 80003ce:	2120      	movs	r1, #32
 80003d0:	4816      	ldr	r0, [pc, #88]	; (800042c <LCD_Cmd+0x15c>)
 80003d2:	f001 fb48 	bl	8001a66 <HAL_GPIO_WritePin>
 80003d6:	e004      	b.n	80003e2 <LCD_Cmd+0x112>
	else
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	2120      	movs	r1, #32
 80003dc:	4813      	ldr	r0, [pc, #76]	; (800042c <LCD_Cmd+0x15c>)
 80003de:	f001 fb42 	bl	8001a66 <HAL_GPIO_WritePin>
	if (cmd & 0x01)
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	f003 0301 	and.w	r3, r3, #1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d005      	beq.n	80003f8 <LCD_Cmd+0x128>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 80003ec:	2201      	movs	r2, #1
 80003ee:	2110      	movs	r1, #16
 80003f0:	480e      	ldr	r0, [pc, #56]	; (800042c <LCD_Cmd+0x15c>)
 80003f2:	f001 fb38 	bl	8001a66 <HAL_GPIO_WritePin>
 80003f6:	e004      	b.n	8000402 <LCD_Cmd+0x132>
	else
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 80003f8:	2200      	movs	r2, #0
 80003fa:	2110      	movs	r1, #16
 80003fc:	480b      	ldr	r0, [pc, #44]	; (800042c <LCD_Cmd+0x15c>)
 80003fe:	f001 fb32 	bl	8001a66 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 8000402:	2201      	movs	r2, #1
 8000404:	2101      	movs	r1, #1
 8000406:	4809      	ldr	r0, [pc, #36]	; (800042c <LCD_Cmd+0x15c>)
 8000408:	f001 fb2d 	bl	8001a66 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800040c:	2001      	movs	r0, #1
 800040e:	f001 f887 	bl	8001520 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000412:	2200      	movs	r2, #0
 8000414:	2101      	movs	r1, #1
 8000416:	4805      	ldr	r0, [pc, #20]	; (800042c <LCD_Cmd+0x15c>)
 8000418:	f001 fb25 	bl	8001a66 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800041c:	2001      	movs	r0, #1
 800041e:	f001 f87f 	bl	8001520 <HAL_Delay>

}
 8000422:	bf00      	nop
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	40010800 	.word	0x40010800

08000430 <LCD_Clear>:
*
*  @return None.
*
******************************************************************************/
void LCD_Clear(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
	LCD_Cmd(0x01);
 8000434:	2001      	movs	r0, #1
 8000436:	f7ff ff4b 	bl	80002d0 <LCD_Cmd>
}
 800043a:	bf00      	nop
 800043c:	bd80      	pop	{r7, pc}

0800043e <LCD_Init>:
*
*  @return None.
*
******************************************************************************/
void LCD_Init(void)
{
 800043e:	b580      	push	{r7, lr}
 8000440:	af00      	add	r7, sp, #0
	LCD_Cmd(0x33);
 8000442:	2033      	movs	r0, #51	; 0x33
 8000444:	f7ff ff44 	bl	80002d0 <LCD_Cmd>
	LCD_Cmd(0x32);
 8000448:	2032      	movs	r0, #50	; 0x32
 800044a:	f7ff ff41 	bl	80002d0 <LCD_Cmd>
	LCD_Cmd(0x28);
 800044e:	2028      	movs	r0, #40	; 0x28
 8000450:	f7ff ff3e 	bl	80002d0 <LCD_Cmd>
	LCD_Cmd(0x06);
 8000454:	2006      	movs	r0, #6
 8000456:	f7ff ff3b 	bl	80002d0 <LCD_Cmd>
	LCD_Cmd(0x0C);
 800045a:	200c      	movs	r0, #12
 800045c:	f7ff ff38 	bl	80002d0 <LCD_Cmd>
	LCD_Cmd(0x01);
 8000460:	2001      	movs	r0, #1
 8000462:	f7ff ff35 	bl	80002d0 <LCD_Cmd>
}
 8000466:	bf00      	nop
 8000468:	bd80      	pop	{r7, pc}
	...

0800046c <EE_Write>:
void converter_preset();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void EE_Write(uint8_t devAddress, uint8_t memAddress, uint8_t data){
 800046c:	b580      	push	{r7, lr}
 800046e:	b088      	sub	sp, #32
 8000470:	af04      	add	r7, sp, #16
 8000472:	4603      	mov	r3, r0
 8000474:	71fb      	strb	r3, [r7, #7]
 8000476:	460b      	mov	r3, r1
 8000478:	71bb      	strb	r3, [r7, #6]
 800047a:	4613      	mov	r3, r2
 800047c:	717b      	strb	r3, [r7, #5]
  		HAL_StatusTypeDef Error;

  		if(memAddress >= 128){
 800047e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000482:	2b00      	cmp	r3, #0
 8000484:	da06      	bge.n	8000494 <EE_Write+0x28>
  			devAddress |= 0x2;
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	f043 0302 	orr.w	r3, r3, #2
 800048c:	71fb      	strb	r3, [r7, #7]
  			memAddress -= 128;
 800048e:	79bb      	ldrb	r3, [r7, #6]
 8000490:	3b80      	subs	r3, #128	; 0x80
 8000492:	71bb      	strb	r3, [r7, #6]
  		}
  		Error =  HAL_I2C_Mem_Write(&hi2c1, devAddress, memAddress, 1, &data, 1, 100);
 8000494:	79fb      	ldrb	r3, [r7, #7]
 8000496:	b299      	uxth	r1, r3
 8000498:	79bb      	ldrb	r3, [r7, #6]
 800049a:	b29a      	uxth	r2, r3
 800049c:	2364      	movs	r3, #100	; 0x64
 800049e:	9302      	str	r3, [sp, #8]
 80004a0:	2301      	movs	r3, #1
 80004a2:	9301      	str	r3, [sp, #4]
 80004a4:	1d7b      	adds	r3, r7, #5
 80004a6:	9300      	str	r3, [sp, #0]
 80004a8:	2301      	movs	r3, #1
 80004aa:	4807      	ldr	r0, [pc, #28]	; (80004c8 <EE_Write+0x5c>)
 80004ac:	f001 fc38 	bl	8001d20 <HAL_I2C_Mem_Write>
 80004b0:	4603      	mov	r3, r0
 80004b2:	73fb      	strb	r3, [r7, #15]
  		if(Error != HAL_OK){
 80004b4:	7bfb      	ldrb	r3, [r7, #15]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <EE_Write+0x52>
  			Error_Handler();
 80004ba:	f000 febd 	bl	8001238 <Error_Handler>
  		}
  	}
 80004be:	bf00      	nop
 80004c0:	3710      	adds	r7, #16
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	20000078 	.word	0x20000078

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 ffc3 	bl	800145c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 fdd7 	bl	8001088 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 fe3f 	bl	800115c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004de:	f000 fe0f 	bl	8001100 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
   sys_init();
 80004e2:	f000 fd49 	bl	8000f78 <sys_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	   if ((start == 1) && (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)))
 80004e6:	4b97      	ldr	r3, [pc, #604]	; (8000744 <main+0x278>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b01      	cmp	r3, #1
 80004ec:	d110      	bne.n	8000510 <main+0x44>
 80004ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f2:	4895      	ldr	r0, [pc, #596]	; (8000748 <main+0x27c>)
 80004f4:	f001 faa0 	bl	8001a38 <HAL_GPIO_ReadPin>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d008      	beq.n	8000510 <main+0x44>
	  		{
	  			ENTER_Boucing();
 80004fe:	f000 fbc9 	bl	8000c94 <ENTER_Boucing>
	  			Buzzer_Teclas();
 8000502:	f000 fb87 	bl	8000c14 <Buzzer_Teclas>
	  			start = 3;
 8000506:	4b8f      	ldr	r3, [pc, #572]	; (8000744 <main+0x278>)
 8000508:	2203      	movs	r2, #3
 800050a:	701a      	strb	r2, [r3, #0]
	  			converter_preset();
 800050c:	f000 fd8c 	bl	8001028 <converter_preset>
	  		}

	  		if (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin) && (start == 1))
 8000510:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000514:	488c      	ldr	r0, [pc, #560]	; (8000748 <main+0x27c>)
 8000516:	f001 fa8f 	bl	8001a38 <HAL_GPIO_ReadPin>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d00f      	beq.n	8000540 <main+0x74>
 8000520:	4b88      	ldr	r3, [pc, #544]	; (8000744 <main+0x278>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b01      	cmp	r3, #1
 8000526:	d10b      	bne.n	8000540 <main+0x74>
	  		{
	  			INC_Boucing();
 8000528:	f000 fb8c 	bl	8000c44 <INC_Boucing>
	  			Buzzer_Teclas();
 800052c:	f000 fb72 	bl	8000c14 <Buzzer_Teclas>
	  			LCD_Clear();
 8000530:	f7ff ff7e 	bl	8000430 <LCD_Clear>
	  			menu = 1;
 8000534:	4b85      	ldr	r3, [pc, #532]	; (800074c <main+0x280>)
 8000536:	2201      	movs	r2, #1
 8000538:	701a      	strb	r2, [r3, #0]
	  			start = 0;
 800053a:	4b82      	ldr	r3, [pc, #520]	; (8000744 <main+0x278>)
 800053c:	2200      	movs	r2, #0
 800053e:	701a      	strb	r2, [r3, #0]
	  		}

	  		if ((menu == 1) && (HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin)))
 8000540:	4b82      	ldr	r3, [pc, #520]	; (800074c <main+0x280>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b01      	cmp	r3, #1
 8000546:	d113      	bne.n	8000570 <main+0xa4>
 8000548:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800054c:	487e      	ldr	r0, [pc, #504]	; (8000748 <main+0x27c>)
 800054e:	f001 fa73 	bl	8001a38 <HAL_GPIO_ReadPin>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d00b      	beq.n	8000570 <main+0xa4>
	  		{
	  			DEC_Boucing();
 8000558:	f000 fb88 	bl	8000c6c <DEC_Boucing>
	  			Buzzer_Teclas();
 800055c:	f000 fb5a 	bl	8000c14 <Buzzer_Teclas>
	  			LCD_Clear();
 8000560:	f7ff ff66 	bl	8000430 <LCD_Clear>
	  			menu = 0;
 8000564:	4b79      	ldr	r3, [pc, #484]	; (800074c <main+0x280>)
 8000566:	2200      	movs	r2, #0
 8000568:	701a      	strb	r2, [r3, #0]
	  			start = 2;
 800056a:	4b76      	ldr	r3, [pc, #472]	; (8000744 <main+0x278>)
 800056c:	2202      	movs	r2, #2
 800056e:	701a      	strb	r2, [r3, #0]
	  		}

	  		if ((aux_start == 1) && (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)))
 8000570:	4b77      	ldr	r3, [pc, #476]	; (8000750 <main+0x284>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b01      	cmp	r3, #1
 8000576:	d113      	bne.n	80005a0 <main+0xd4>
 8000578:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800057c:	4872      	ldr	r0, [pc, #456]	; (8000748 <main+0x27c>)
 800057e:	f001 fa5b 	bl	8001a38 <HAL_GPIO_ReadPin>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d00b      	beq.n	80005a0 <main+0xd4>
	  		{
	  			ENTER_Boucing();
 8000588:	f000 fb84 	bl	8000c94 <ENTER_Boucing>
	  			Buzzer_Teclas();
 800058c:	f000 fb42 	bl	8000c14 <Buzzer_Teclas>
	  			start = 3;
 8000590:	4b6c      	ldr	r3, [pc, #432]	; (8000744 <main+0x278>)
 8000592:	2203      	movs	r2, #3
 8000594:	701a      	strb	r2, [r3, #0]
	  			aux_start = 0;
 8000596:	4b6e      	ldr	r3, [pc, #440]	; (8000750 <main+0x284>)
 8000598:	2200      	movs	r2, #0
 800059a:	701a      	strb	r2, [r3, #0]
	  			converter_preset();
 800059c:	f000 fd44 	bl	8001028 <converter_preset>
	  		}

	  		if ((aux_menu == 1) && (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)))
 80005a0:	4b6c      	ldr	r3, [pc, #432]	; (8000754 <main+0x288>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d11d      	bne.n	80005e4 <main+0x118>
 80005a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ac:	4866      	ldr	r0, [pc, #408]	; (8000748 <main+0x27c>)
 80005ae:	f001 fa43 	bl	8001a38 <HAL_GPIO_ReadPin>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d015      	beq.n	80005e4 <main+0x118>
	  		{
	  			ENTER_Boucing();
 80005b8:	f000 fb6c 	bl	8000c94 <ENTER_Boucing>
	  			Buzzer_Teclas();
 80005bc:	f000 fb2a 	bl	8000c14 <Buzzer_Teclas>
	  			LCD_Clear();
 80005c0:	f7ff ff36 	bl	8000430 <LCD_Clear>
	  			menu = 2;
 80005c4:	4b61      	ldr	r3, [pc, #388]	; (800074c <main+0x280>)
 80005c6:	2202      	movs	r2, #2
 80005c8:	701a      	strb	r2, [r3, #0]
	  			aux_menu = 0;
 80005ca:	4b62      	ldr	r3, [pc, #392]	; (8000754 <main+0x288>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	701a      	strb	r2, [r3, #0]
	  			a_inc = 5;
 80005d0:	4b61      	ldr	r3, [pc, #388]	; (8000758 <main+0x28c>)
 80005d2:	2205      	movs	r2, #5
 80005d4:	701a      	strb	r2, [r3, #0]
	  			sprintf(buffer_accel, "%d", a_inc);
 80005d6:	4b60      	ldr	r3, [pc, #384]	; (8000758 <main+0x28c>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	461a      	mov	r2, r3
 80005dc:	495f      	ldr	r1, [pc, #380]	; (800075c <main+0x290>)
 80005de:	4860      	ldr	r0, [pc, #384]	; (8000760 <main+0x294>)
 80005e0:	f002 fb02 	bl	8002be8 <siprintf>
	  		}

	  		if ((aux_accel == 1) && (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin) && (a_inc <= 80)))
 80005e4:	4b5f      	ldr	r3, [pc, #380]	; (8000764 <main+0x298>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d125      	bne.n	8000638 <main+0x16c>
 80005ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005f0:	4855      	ldr	r0, [pc, #340]	; (8000748 <main+0x27c>)
 80005f2:	f001 fa21 	bl	8001a38 <HAL_GPIO_ReadPin>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d01d      	beq.n	8000638 <main+0x16c>
 80005fc:	4b56      	ldr	r3, [pc, #344]	; (8000758 <main+0x28c>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b50      	cmp	r3, #80	; 0x50
 8000602:	d819      	bhi.n	8000638 <main+0x16c>
	  		{
	  			aux_menu =0;
 8000604:	4b53      	ldr	r3, [pc, #332]	; (8000754 <main+0x288>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
	  			INC_Boucing();
 800060a:	f000 fb1b 	bl	8000c44 <INC_Boucing>
	  			Buzzer_Teclas();
 800060e:	f000 fb01 	bl	8000c14 <Buzzer_Teclas>
	  			LCD_Clear();
 8000612:	f7ff ff0d 	bl	8000430 <LCD_Clear>
	  			a_inc += 5;
 8000616:	4b50      	ldr	r3, [pc, #320]	; (8000758 <main+0x28c>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	3305      	adds	r3, #5
 800061c:	b2da      	uxtb	r2, r3
 800061e:	4b4e      	ldr	r3, [pc, #312]	; (8000758 <main+0x28c>)
 8000620:	701a      	strb	r2, [r3, #0]
	  			sprintf(buffer_accel, "%d", a_inc);
 8000622:	4b4d      	ldr	r3, [pc, #308]	; (8000758 <main+0x28c>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	461a      	mov	r2, r3
 8000628:	494c      	ldr	r1, [pc, #304]	; (800075c <main+0x290>)
 800062a:	484d      	ldr	r0, [pc, #308]	; (8000760 <main+0x294>)
 800062c:	f002 fadc 	bl	8002be8 <siprintf>
	  			menu = 3;
 8000630:	4b46      	ldr	r3, [pc, #280]	; (800074c <main+0x280>)
 8000632:	2203      	movs	r2, #3
 8000634:	701a      	strb	r2, [r3, #0]
 8000636:	e02c      	b.n	8000692 <main+0x1c6>
	  		}
	  		else if (((aux_accel == 1) && (HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin) && (a_inc <= 80) && (a_inc >5))))
 8000638:	4b4a      	ldr	r3, [pc, #296]	; (8000764 <main+0x298>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d128      	bne.n	8000692 <main+0x1c6>
 8000640:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000644:	4840      	ldr	r0, [pc, #256]	; (8000748 <main+0x27c>)
 8000646:	f001 f9f7 	bl	8001a38 <HAL_GPIO_ReadPin>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d020      	beq.n	8000692 <main+0x1c6>
 8000650:	4b41      	ldr	r3, [pc, #260]	; (8000758 <main+0x28c>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b50      	cmp	r3, #80	; 0x50
 8000656:	d81c      	bhi.n	8000692 <main+0x1c6>
 8000658:	4b3f      	ldr	r3, [pc, #252]	; (8000758 <main+0x28c>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b05      	cmp	r3, #5
 800065e:	d918      	bls.n	8000692 <main+0x1c6>
	  		{
	  			aux_menu = 0;
 8000660:	4b3c      	ldr	r3, [pc, #240]	; (8000754 <main+0x288>)
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]
	  			DEC_Boucing();
 8000666:	f000 fb01 	bl	8000c6c <DEC_Boucing>
	  			Buzzer_Teclas();
 800066a:	f000 fad3 	bl	8000c14 <Buzzer_Teclas>
	  			LCD_Clear();
 800066e:	f7ff fedf 	bl	8000430 <LCD_Clear>
	  			a_inc -= 5;
 8000672:	4b39      	ldr	r3, [pc, #228]	; (8000758 <main+0x28c>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	3b05      	subs	r3, #5
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4b37      	ldr	r3, [pc, #220]	; (8000758 <main+0x28c>)
 800067c:	701a      	strb	r2, [r3, #0]
	  			sprintf(buffer_accel, "%d", a_inc);
 800067e:	4b36      	ldr	r3, [pc, #216]	; (8000758 <main+0x28c>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	461a      	mov	r2, r3
 8000684:	4935      	ldr	r1, [pc, #212]	; (800075c <main+0x290>)
 8000686:	4836      	ldr	r0, [pc, #216]	; (8000760 <main+0x294>)
 8000688:	f002 faae 	bl	8002be8 <siprintf>
	  			menu = 3;
 800068c:	4b2f      	ldr	r3, [pc, #188]	; (800074c <main+0x280>)
 800068e:	2203      	movs	r2, #3
 8000690:	701a      	strb	r2, [r3, #0]
	  		}

	  		if ((aux_running == 1) && (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)))
 8000692:	4b35      	ldr	r3, [pc, #212]	; (8000768 <main+0x29c>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b01      	cmp	r3, #1
 8000698:	d12a      	bne.n	80006f0 <main+0x224>
 800069a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800069e:	482a      	ldr	r0, [pc, #168]	; (8000748 <main+0x27c>)
 80006a0:	f001 f9ca 	bl	8001a38 <HAL_GPIO_ReadPin>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d022      	beq.n	80006f0 <main+0x224>
	  		{
	  			a_inc = a_inc;
 80006aa:	4b2b      	ldr	r3, [pc, #172]	; (8000758 <main+0x28c>)
 80006ac:	781a      	ldrb	r2, [r3, #0]
 80006ae:	4b2a      	ldr	r3, [pc, #168]	; (8000758 <main+0x28c>)
 80006b0:	701a      	strb	r2, [r3, #0]
	  			uint8_t memAddress = 0x00;
 80006b2:	2300      	movs	r3, #0
 80006b4:	71fb      	strb	r3, [r7, #7]
	  			EE_Write(EEPROM_ADDRESS, memAddress, a_inc);
 80006b6:	4b28      	ldr	r3, [pc, #160]	; (8000758 <main+0x28c>)
 80006b8:	781a      	ldrb	r2, [r3, #0]
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	4619      	mov	r1, r3
 80006be:	20a0      	movs	r0, #160	; 0xa0
 80006c0:	f7ff fed4 	bl	800046c <EE_Write>
	  			aux_accel = 0;
 80006c4:	4b27      	ldr	r3, [pc, #156]	; (8000764 <main+0x298>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
	  			ENTER_Boucing();
 80006ca:	f000 fae3 	bl	8000c94 <ENTER_Boucing>
	  			Buzzer_Teclas();
 80006ce:	f000 faa1 	bl	8000c14 <Buzzer_Teclas>
	  			LCD_Clear();
 80006d2:	f7ff fead 	bl	8000430 <LCD_Clear>
	  			menu = 4;
 80006d6:	4b1d      	ldr	r3, [pc, #116]	; (800074c <main+0x280>)
 80006d8:	2204      	movs	r2, #4
 80006da:	701a      	strb	r2, [r3, #0]
	  			r_inc = 5;
 80006dc:	4b23      	ldr	r3, [pc, #140]	; (800076c <main+0x2a0>)
 80006de:	2205      	movs	r2, #5
 80006e0:	701a      	strb	r2, [r3, #0]
	  			sprintf(buffer_running, "%d", r_inc);
 80006e2:	4b22      	ldr	r3, [pc, #136]	; (800076c <main+0x2a0>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	461a      	mov	r2, r3
 80006e8:	491c      	ldr	r1, [pc, #112]	; (800075c <main+0x290>)
 80006ea:	4821      	ldr	r0, [pc, #132]	; (8000770 <main+0x2a4>)
 80006ec:	f002 fa7c 	bl	8002be8 <siprintf>
	  		}

	  		if ((inc_running == 1) && (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin) && (r_inc <= 180)))
 80006f0:	4b20      	ldr	r3, [pc, #128]	; (8000774 <main+0x2a8>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d13f      	bne.n	8000778 <main+0x2ac>
 80006f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006fc:	4812      	ldr	r0, [pc, #72]	; (8000748 <main+0x27c>)
 80006fe:	f001 f99b 	bl	8001a38 <HAL_GPIO_ReadPin>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d037      	beq.n	8000778 <main+0x2ac>
 8000708:	4b18      	ldr	r3, [pc, #96]	; (800076c <main+0x2a0>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2bb4      	cmp	r3, #180	; 0xb4
 800070e:	d833      	bhi.n	8000778 <main+0x2ac>
	  		{
	  			aux_running = 0;
 8000710:	4b15      	ldr	r3, [pc, #84]	; (8000768 <main+0x29c>)
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
	  			INC_Boucing();
 8000716:	f000 fa95 	bl	8000c44 <INC_Boucing>
	  			Buzzer_Teclas();
 800071a:	f000 fa7b 	bl	8000c14 <Buzzer_Teclas>
	  			LCD_Clear();
 800071e:	f7ff fe87 	bl	8000430 <LCD_Clear>
	  			r_inc += 5;
 8000722:	4b12      	ldr	r3, [pc, #72]	; (800076c <main+0x2a0>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	3305      	adds	r3, #5
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <main+0x2a0>)
 800072c:	701a      	strb	r2, [r3, #0]
	  			sprintf(buffer_running, "%d", r_inc);
 800072e:	4b0f      	ldr	r3, [pc, #60]	; (800076c <main+0x2a0>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	461a      	mov	r2, r3
 8000734:	4909      	ldr	r1, [pc, #36]	; (800075c <main+0x290>)
 8000736:	480e      	ldr	r0, [pc, #56]	; (8000770 <main+0x2a4>)
 8000738:	f002 fa56 	bl	8002be8 <siprintf>
	  			menu = 5;
 800073c:	4b03      	ldr	r3, [pc, #12]	; (800074c <main+0x280>)
 800073e:	2205      	movs	r2, #5
 8000740:	701a      	strb	r2, [r3, #0]
 8000742:	e046      	b.n	80007d2 <main+0x306>
 8000744:	200000cd 	.word	0x200000cd
 8000748:	40010c00 	.word	0x40010c00
 800074c:	200000cc 	.word	0x200000cc
 8000750:	200000cf 	.word	0x200000cf
 8000754:	200000ce 	.word	0x200000ce
 8000758:	200000d4 	.word	0x200000d4
 800075c:	08003564 	.word	0x08003564
 8000760:	200000dc 	.word	0x200000dc
 8000764:	200000d0 	.word	0x200000d0
 8000768:	200000d1 	.word	0x200000d1
 800076c:	200000d5 	.word	0x200000d5
 8000770:	200000ec 	.word	0x200000ec
 8000774:	200000d7 	.word	0x200000d7
	  		}
	  		else if ((inc_running == 1) && (HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin) && (r_inc <= 180) && (r_inc > 5)))
 8000778:	4bb2      	ldr	r3, [pc, #712]	; (8000a44 <main+0x578>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b01      	cmp	r3, #1
 800077e:	d128      	bne.n	80007d2 <main+0x306>
 8000780:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000784:	48b0      	ldr	r0, [pc, #704]	; (8000a48 <main+0x57c>)
 8000786:	f001 f957 	bl	8001a38 <HAL_GPIO_ReadPin>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d020      	beq.n	80007d2 <main+0x306>
 8000790:	4bae      	ldr	r3, [pc, #696]	; (8000a4c <main+0x580>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2bb4      	cmp	r3, #180	; 0xb4
 8000796:	d81c      	bhi.n	80007d2 <main+0x306>
 8000798:	4bac      	ldr	r3, [pc, #688]	; (8000a4c <main+0x580>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b05      	cmp	r3, #5
 800079e:	d918      	bls.n	80007d2 <main+0x306>
	  		{
	  			aux_running = 0;
 80007a0:	4bab      	ldr	r3, [pc, #684]	; (8000a50 <main+0x584>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	701a      	strb	r2, [r3, #0]
	  			DEC_Boucing();
 80007a6:	f000 fa61 	bl	8000c6c <DEC_Boucing>
	  			Buzzer_Teclas();
 80007aa:	f000 fa33 	bl	8000c14 <Buzzer_Teclas>
	  			LCD_Clear();
 80007ae:	f7ff fe3f 	bl	8000430 <LCD_Clear>
	  			r_inc -= 5;
 80007b2:	4ba6      	ldr	r3, [pc, #664]	; (8000a4c <main+0x580>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	3b05      	subs	r3, #5
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	4ba4      	ldr	r3, [pc, #656]	; (8000a4c <main+0x580>)
 80007bc:	701a      	strb	r2, [r3, #0]
	  			sprintf(buffer_running, "%d", r_inc);
 80007be:	4ba3      	ldr	r3, [pc, #652]	; (8000a4c <main+0x580>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	461a      	mov	r2, r3
 80007c4:	49a3      	ldr	r1, [pc, #652]	; (8000a54 <main+0x588>)
 80007c6:	48a4      	ldr	r0, [pc, #656]	; (8000a58 <main+0x58c>)
 80007c8:	f002 fa0e 	bl	8002be8 <siprintf>
	  			menu = 5;
 80007cc:	4ba3      	ldr	r3, [pc, #652]	; (8000a5c <main+0x590>)
 80007ce:	2205      	movs	r2, #5
 80007d0:	701a      	strb	r2, [r3, #0]
	  		}

	  		if ((aux_decel == 1) && (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)))
 80007d2:	4ba3      	ldr	r3, [pc, #652]	; (8000a60 <main+0x594>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d12a      	bne.n	8000830 <main+0x364>
 80007da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007de:	489a      	ldr	r0, [pc, #616]	; (8000a48 <main+0x57c>)
 80007e0:	f001 f92a 	bl	8001a38 <HAL_GPIO_ReadPin>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d022      	beq.n	8000830 <main+0x364>
	  		{
	  			r_inc = r_inc;
 80007ea:	4b98      	ldr	r3, [pc, #608]	; (8000a4c <main+0x580>)
 80007ec:	781a      	ldrb	r2, [r3, #0]
 80007ee:	4b97      	ldr	r3, [pc, #604]	; (8000a4c <main+0x580>)
 80007f0:	701a      	strb	r2, [r3, #0]
	  			uint8_t memAddress = 0x01;
 80007f2:	2301      	movs	r3, #1
 80007f4:	71bb      	strb	r3, [r7, #6]
	  			EE_Write(EEPROM_ADDRESS, memAddress, r_inc);
 80007f6:	4b95      	ldr	r3, [pc, #596]	; (8000a4c <main+0x580>)
 80007f8:	781a      	ldrb	r2, [r3, #0]
 80007fa:	79bb      	ldrb	r3, [r7, #6]
 80007fc:	4619      	mov	r1, r3
 80007fe:	20a0      	movs	r0, #160	; 0xa0
 8000800:	f7ff fe34 	bl	800046c <EE_Write>
	  			inc_running = 0;
 8000804:	4b8f      	ldr	r3, [pc, #572]	; (8000a44 <main+0x578>)
 8000806:	2200      	movs	r2, #0
 8000808:	701a      	strb	r2, [r3, #0]
	  			ENTER_Boucing();
 800080a:	f000 fa43 	bl	8000c94 <ENTER_Boucing>
	  			Buzzer_Teclas();
 800080e:	f000 fa01 	bl	8000c14 <Buzzer_Teclas>
	  			LCD_Clear();
 8000812:	f7ff fe0d 	bl	8000430 <LCD_Clear>
	  			menu = 6;
 8000816:	4b91      	ldr	r3, [pc, #580]	; (8000a5c <main+0x590>)
 8000818:	2206      	movs	r2, #6
 800081a:	701a      	strb	r2, [r3, #0]
	  			d_inc = 5;
 800081c:	4b91      	ldr	r3, [pc, #580]	; (8000a64 <main+0x598>)
 800081e:	2205      	movs	r2, #5
 8000820:	701a      	strb	r2, [r3, #0]
	  			sprintf(buffer_decel, "%d", d_inc);
 8000822:	4b90      	ldr	r3, [pc, #576]	; (8000a64 <main+0x598>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	461a      	mov	r2, r3
 8000828:	498a      	ldr	r1, [pc, #552]	; (8000a54 <main+0x588>)
 800082a:	488f      	ldr	r0, [pc, #572]	; (8000a68 <main+0x59c>)
 800082c:	f002 f9dc 	bl	8002be8 <siprintf>
	  		}

	  		if ((inc_decel == 1) && (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin) && (d_inc <= 80)))
 8000830:	4b8e      	ldr	r3, [pc, #568]	; (8000a6c <main+0x5a0>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b01      	cmp	r3, #1
 8000836:	d125      	bne.n	8000884 <main+0x3b8>
 8000838:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800083c:	4882      	ldr	r0, [pc, #520]	; (8000a48 <main+0x57c>)
 800083e:	f001 f8fb 	bl	8001a38 <HAL_GPIO_ReadPin>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d01d      	beq.n	8000884 <main+0x3b8>
 8000848:	4b86      	ldr	r3, [pc, #536]	; (8000a64 <main+0x598>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b50      	cmp	r3, #80	; 0x50
 800084e:	d819      	bhi.n	8000884 <main+0x3b8>
	  		{
	  			aux_decel = 0;
 8000850:	4b83      	ldr	r3, [pc, #524]	; (8000a60 <main+0x594>)
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]
	  			INC_Boucing();
 8000856:	f000 f9f5 	bl	8000c44 <INC_Boucing>
	  			Buzzer_Teclas();
 800085a:	f000 f9db 	bl	8000c14 <Buzzer_Teclas>
	  			LCD_Clear();
 800085e:	f7ff fde7 	bl	8000430 <LCD_Clear>
	  			d_inc += 5;
 8000862:	4b80      	ldr	r3, [pc, #512]	; (8000a64 <main+0x598>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	3305      	adds	r3, #5
 8000868:	b2da      	uxtb	r2, r3
 800086a:	4b7e      	ldr	r3, [pc, #504]	; (8000a64 <main+0x598>)
 800086c:	701a      	strb	r2, [r3, #0]
	  			sprintf(buffer_decel, "%d", d_inc);
 800086e:	4b7d      	ldr	r3, [pc, #500]	; (8000a64 <main+0x598>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	461a      	mov	r2, r3
 8000874:	4977      	ldr	r1, [pc, #476]	; (8000a54 <main+0x588>)
 8000876:	487c      	ldr	r0, [pc, #496]	; (8000a68 <main+0x59c>)
 8000878:	f002 f9b6 	bl	8002be8 <siprintf>
	  			menu = 7;
 800087c:	4b77      	ldr	r3, [pc, #476]	; (8000a5c <main+0x590>)
 800087e:	2207      	movs	r2, #7
 8000880:	701a      	strb	r2, [r3, #0]
 8000882:	e02c      	b.n	80008de <main+0x412>
	  		}
	  		else if ((inc_decel == 1) && (HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin) && (d_inc <= 80) && (d_inc > 5)))
 8000884:	4b79      	ldr	r3, [pc, #484]	; (8000a6c <main+0x5a0>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d128      	bne.n	80008de <main+0x412>
 800088c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000890:	486d      	ldr	r0, [pc, #436]	; (8000a48 <main+0x57c>)
 8000892:	f001 f8d1 	bl	8001a38 <HAL_GPIO_ReadPin>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d020      	beq.n	80008de <main+0x412>
 800089c:	4b71      	ldr	r3, [pc, #452]	; (8000a64 <main+0x598>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b50      	cmp	r3, #80	; 0x50
 80008a2:	d81c      	bhi.n	80008de <main+0x412>
 80008a4:	4b6f      	ldr	r3, [pc, #444]	; (8000a64 <main+0x598>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b05      	cmp	r3, #5
 80008aa:	d918      	bls.n	80008de <main+0x412>
	  		{
	  			aux_decel = 0;
 80008ac:	4b6c      	ldr	r3, [pc, #432]	; (8000a60 <main+0x594>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	701a      	strb	r2, [r3, #0]
	  			DEC_Boucing();
 80008b2:	f000 f9db 	bl	8000c6c <DEC_Boucing>
	  			Buzzer_Teclas();
 80008b6:	f000 f9ad 	bl	8000c14 <Buzzer_Teclas>
	  			LCD_Clear();
 80008ba:	f7ff fdb9 	bl	8000430 <LCD_Clear>
	  			d_inc -= 5;
 80008be:	4b69      	ldr	r3, [pc, #420]	; (8000a64 <main+0x598>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	3b05      	subs	r3, #5
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	4b67      	ldr	r3, [pc, #412]	; (8000a64 <main+0x598>)
 80008c8:	701a      	strb	r2, [r3, #0]
	  			sprintf(buffer_decel, "%d", d_inc);
 80008ca:	4b66      	ldr	r3, [pc, #408]	; (8000a64 <main+0x598>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	461a      	mov	r2, r3
 80008d0:	4960      	ldr	r1, [pc, #384]	; (8000a54 <main+0x588>)
 80008d2:	4865      	ldr	r0, [pc, #404]	; (8000a68 <main+0x59c>)
 80008d4:	f002 f988 	bl	8002be8 <siprintf>
	  			menu = 7;
 80008d8:	4b60      	ldr	r3, [pc, #384]	; (8000a5c <main+0x590>)
 80008da:	2207      	movs	r2, #7
 80008dc:	701a      	strb	r2, [r3, #0]
	  		}

	  		if ((config_finish == 1) && (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)))
 80008de:	4b64      	ldr	r3, [pc, #400]	; (8000a70 <main+0x5a4>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d123      	bne.n	800092e <main+0x462>
 80008e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ea:	4857      	ldr	r0, [pc, #348]	; (8000a48 <main+0x57c>)
 80008ec:	f001 f8a4 	bl	8001a38 <HAL_GPIO_ReadPin>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d01b      	beq.n	800092e <main+0x462>
	  		{
	  			d_inc = d_inc;
 80008f6:	4b5b      	ldr	r3, [pc, #364]	; (8000a64 <main+0x598>)
 80008f8:	781a      	ldrb	r2, [r3, #0]
 80008fa:	4b5a      	ldr	r3, [pc, #360]	; (8000a64 <main+0x598>)
 80008fc:	701a      	strb	r2, [r3, #0]
	  			uint8_t memAddress = 0x02;
 80008fe:	2302      	movs	r3, #2
 8000900:	717b      	strb	r3, [r7, #5]
	  			EE_Write(EEPROM_ADDRESS, memAddress, d_inc);
 8000902:	4b58      	ldr	r3, [pc, #352]	; (8000a64 <main+0x598>)
 8000904:	781a      	ldrb	r2, [r3, #0]
 8000906:	797b      	ldrb	r3, [r7, #5]
 8000908:	4619      	mov	r1, r3
 800090a:	20a0      	movs	r0, #160	; 0xa0
 800090c:	f7ff fdae 	bl	800046c <EE_Write>
	  			inc_decel = 0;
 8000910:	4b56      	ldr	r3, [pc, #344]	; (8000a6c <main+0x5a0>)
 8000912:	2200      	movs	r2, #0
 8000914:	701a      	strb	r2, [r3, #0]
	  			ENTER_Boucing();
 8000916:	f000 f9bd 	bl	8000c94 <ENTER_Boucing>
	  			Buzzer_Teclas();
 800091a:	f000 f97b 	bl	8000c14 <Buzzer_Teclas>
	  			LCD_Clear();
 800091e:	f7ff fd87 	bl	8000430 <LCD_Clear>
	  			start = 4;
 8000922:	4b54      	ldr	r3, [pc, #336]	; (8000a74 <main+0x5a8>)
 8000924:	2204      	movs	r2, #4
 8000926:	701a      	strb	r2, [r3, #0]
	  			menu = 0;
 8000928:	4b4c      	ldr	r3, [pc, #304]	; (8000a5c <main+0x590>)
 800092a:	2200      	movs	r2, #0
 800092c:	701a      	strb	r2, [r3, #0]
	  		}

	  		if ((HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)) && (config_init = 1))
 800092e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000932:	4845      	ldr	r0, [pc, #276]	; (8000a48 <main+0x57c>)
 8000934:	f001 f880 	bl	8001a38 <HAL_GPIO_ReadPin>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d00d      	beq.n	800095a <main+0x48e>
 800093e:	4b4e      	ldr	r3, [pc, #312]	; (8000a78 <main+0x5ac>)
 8000940:	2201      	movs	r2, #1
 8000942:	701a      	strb	r2, [r3, #0]
	  		{
	  			ENTER_Boucing();
 8000944:	f000 f9a6 	bl	8000c94 <ENTER_Boucing>
	  			Buzzer_Teclas();
 8000948:	f000 f964 	bl	8000c14 <Buzzer_Teclas>
	  			LCD_Clear();
 800094c:	f7ff fd70 	bl	8000430 <LCD_Clear>
	  			set_converter();
 8000950:	f000 fb36 	bl	8000fc0 <set_converter>
	  			start = 5;
 8000954:	4b47      	ldr	r3, [pc, #284]	; (8000a74 <main+0x5a8>)
 8000956:	2205      	movs	r2, #5
 8000958:	701a      	strb	r2, [r3, #0]
	  		}

	  		switch (menu)
 800095a:	4b40      	ldr	r3, [pc, #256]	; (8000a5c <main+0x590>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	3b01      	subs	r3, #1
 8000960:	2b06      	cmp	r3, #6
 8000962:	f200 80e6 	bhi.w	8000b32 <main+0x666>
 8000966:	a201      	add	r2, pc, #4	; (adr r2, 800096c <main+0x4a0>)
 8000968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800096c:	08000989 	.word	0x08000989
 8000970:	080009ad 	.word	0x080009ad
 8000974:	080009df 	.word	0x080009df
 8000978:	08000a11 	.word	0x08000a11
 800097c:	08000a9d 	.word	0x08000a9d
 8000980:	08000acf 	.word	0x08000acf
 8000984:	08000b01 	.word	0x08000b01
	  		{
	  		case 1:
	  			LCD_Cursor(0, 2);
 8000988:	2102      	movs	r1, #2
 800098a:	2000      	movs	r0, #0
 800098c:	f7ff fbde 	bl	800014c <LCD_Cursor>
	  			LCD_String("DC MOTOR SYS");
 8000990:	483a      	ldr	r0, [pc, #232]	; (8000a7c <main+0x5b0>)
 8000992:	f7ff fc87 	bl	80002a4 <LCD_String>
	  			LCD_Cursor(1, 0);
 8000996:	2100      	movs	r1, #0
 8000998:	2001      	movs	r0, #1
 800099a:	f7ff fbd7 	bl	800014c <LCD_Cursor>
	  			LCD_String("<     MENU    ");
 800099e:	4838      	ldr	r0, [pc, #224]	; (8000a80 <main+0x5b4>)
 80009a0:	f7ff fc80 	bl	80002a4 <LCD_String>
	  			aux_menu = 1;
 80009a4:	4b37      	ldr	r3, [pc, #220]	; (8000a84 <main+0x5b8>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	701a      	strb	r2, [r3, #0]
	  			break;
 80009aa:	e0c2      	b.n	8000b32 <main+0x666>

	  		case 2:
	  			LCD_Cursor(0, 0);
 80009ac:	2100      	movs	r1, #0
 80009ae:	2000      	movs	r0, #0
 80009b0:	f7ff fbcc 	bl	800014c <LCD_Cursor>
	  			LCD_String("   ACCEL TIME   ");
 80009b4:	4834      	ldr	r0, [pc, #208]	; (8000a88 <main+0x5bc>)
 80009b6:	f7ff fc75 	bl	80002a4 <LCD_String>
	  			LCD_Cursor(1, 7);
 80009ba:	2107      	movs	r1, #7
 80009bc:	2001      	movs	r0, #1
 80009be:	f7ff fbc5 	bl	800014c <LCD_Cursor>
	  			LCD_String(buffer_accel);
 80009c2:	4832      	ldr	r0, [pc, #200]	; (8000a8c <main+0x5c0>)
 80009c4:	f7ff fc6e 	bl	80002a4 <LCD_String>
	  			LCD_Cursor(1, 8);
 80009c8:	2108      	movs	r1, #8
 80009ca:	2001      	movs	r0, #1
 80009cc:	f7ff fbbe 	bl	800014c <LCD_Cursor>
	  			LCD_String("s");
 80009d0:	482f      	ldr	r0, [pc, #188]	; (8000a90 <main+0x5c4>)
 80009d2:	f7ff fc67 	bl	80002a4 <LCD_String>
	  			aux_accel = 1;
 80009d6:	4b2f      	ldr	r3, [pc, #188]	; (8000a94 <main+0x5c8>)
 80009d8:	2201      	movs	r2, #1
 80009da:	701a      	strb	r2, [r3, #0]
	  			break;
 80009dc:	e0a9      	b.n	8000b32 <main+0x666>

	  		case 3:
	  			LCD_Cursor(0, 0);
 80009de:	2100      	movs	r1, #0
 80009e0:	2000      	movs	r0, #0
 80009e2:	f7ff fbb3 	bl	800014c <LCD_Cursor>
	  			LCD_String("   ACCEL TIME   ");
 80009e6:	4828      	ldr	r0, [pc, #160]	; (8000a88 <main+0x5bc>)
 80009e8:	f7ff fc5c 	bl	80002a4 <LCD_String>
	  			LCD_Cursor(1, 6);
 80009ec:	2106      	movs	r1, #6
 80009ee:	2001      	movs	r0, #1
 80009f0:	f7ff fbac 	bl	800014c <LCD_Cursor>
	  			LCD_String(buffer_accel);
 80009f4:	4825      	ldr	r0, [pc, #148]	; (8000a8c <main+0x5c0>)
 80009f6:	f7ff fc55 	bl	80002a4 <LCD_String>
	  			LCD_Cursor(1, 8);
 80009fa:	2108      	movs	r1, #8
 80009fc:	2001      	movs	r0, #1
 80009fe:	f7ff fba5 	bl	800014c <LCD_Cursor>
	  			LCD_String("s");
 8000a02:	4823      	ldr	r0, [pc, #140]	; (8000a90 <main+0x5c4>)
 8000a04:	f7ff fc4e 	bl	80002a4 <LCD_String>
	  			aux_running = 1;
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <main+0x584>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	701a      	strb	r2, [r3, #0]
	  			break;
 8000a0e:	e090      	b.n	8000b32 <main+0x666>

	  		case 4:
	  			LCD_Cursor(0, 0);
 8000a10:	2100      	movs	r1, #0
 8000a12:	2000      	movs	r0, #0
 8000a14:	f7ff fb9a 	bl	800014c <LCD_Cursor>
	  			LCD_String("  RUNNING TIME  ");
 8000a18:	481f      	ldr	r0, [pc, #124]	; (8000a98 <main+0x5cc>)
 8000a1a:	f7ff fc43 	bl	80002a4 <LCD_String>
	  			LCD_Cursor(1, 7);
 8000a1e:	2107      	movs	r1, #7
 8000a20:	2001      	movs	r0, #1
 8000a22:	f7ff fb93 	bl	800014c <LCD_Cursor>
	  			LCD_String(buffer_running);
 8000a26:	480c      	ldr	r0, [pc, #48]	; (8000a58 <main+0x58c>)
 8000a28:	f7ff fc3c 	bl	80002a4 <LCD_String>
	  			LCD_Cursor(1, 8);
 8000a2c:	2108      	movs	r1, #8
 8000a2e:	2001      	movs	r0, #1
 8000a30:	f7ff fb8c 	bl	800014c <LCD_Cursor>
	  			LCD_String("s");
 8000a34:	4816      	ldr	r0, [pc, #88]	; (8000a90 <main+0x5c4>)
 8000a36:	f7ff fc35 	bl	80002a4 <LCD_String>
	  			inc_running = 1;
 8000a3a:	4b02      	ldr	r3, [pc, #8]	; (8000a44 <main+0x578>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	701a      	strb	r2, [r3, #0]
	  			break;
 8000a40:	e077      	b.n	8000b32 <main+0x666>
 8000a42:	bf00      	nop
 8000a44:	200000d7 	.word	0x200000d7
 8000a48:	40010c00 	.word	0x40010c00
 8000a4c:	200000d5 	.word	0x200000d5
 8000a50:	200000d1 	.word	0x200000d1
 8000a54:	08003564 	.word	0x08003564
 8000a58:	200000ec 	.word	0x200000ec
 8000a5c:	200000cc 	.word	0x200000cc
 8000a60:	200000d2 	.word	0x200000d2
 8000a64:	200000d6 	.word	0x200000d6
 8000a68:	200000fc 	.word	0x200000fc
 8000a6c:	200000d8 	.word	0x200000d8
 8000a70:	200000d3 	.word	0x200000d3
 8000a74:	200000cd 	.word	0x200000cd
 8000a78:	200000d9 	.word	0x200000d9
 8000a7c:	08003568 	.word	0x08003568
 8000a80:	08003578 	.word	0x08003578
 8000a84:	200000ce 	.word	0x200000ce
 8000a88:	08003588 	.word	0x08003588
 8000a8c:	200000dc 	.word	0x200000dc
 8000a90:	0800359c 	.word	0x0800359c
 8000a94:	200000d0 	.word	0x200000d0
 8000a98:	080035a0 	.word	0x080035a0

	  		case 5:
	  			LCD_Cursor(0, 0);
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff fb54 	bl	800014c <LCD_Cursor>
	  			LCD_String("  RUNNING TIME  ");
 8000aa4:	484d      	ldr	r0, [pc, #308]	; (8000bdc <main+0x710>)
 8000aa6:	f7ff fbfd 	bl	80002a4 <LCD_String>
	  			LCD_Cursor(1, 6);
 8000aaa:	2106      	movs	r1, #6
 8000aac:	2001      	movs	r0, #1
 8000aae:	f7ff fb4d 	bl	800014c <LCD_Cursor>
	  			LCD_String(buffer_running);
 8000ab2:	484b      	ldr	r0, [pc, #300]	; (8000be0 <main+0x714>)
 8000ab4:	f7ff fbf6 	bl	80002a4 <LCD_String>
	  			LCD_Cursor(1, 9);
 8000ab8:	2109      	movs	r1, #9
 8000aba:	2001      	movs	r0, #1
 8000abc:	f7ff fb46 	bl	800014c <LCD_Cursor>
	  			LCD_String("s");
 8000ac0:	4848      	ldr	r0, [pc, #288]	; (8000be4 <main+0x718>)
 8000ac2:	f7ff fbef 	bl	80002a4 <LCD_String>
	  			aux_decel = 1;
 8000ac6:	4b48      	ldr	r3, [pc, #288]	; (8000be8 <main+0x71c>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	701a      	strb	r2, [r3, #0]
	  			break;
 8000acc:	e031      	b.n	8000b32 <main+0x666>

	  		case 6:
	  			LCD_Cursor(0, 0);
 8000ace:	2100      	movs	r1, #0
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f7ff fb3b 	bl	800014c <LCD_Cursor>
	  			LCD_String("   DECEL TIME   ");
 8000ad6:	4845      	ldr	r0, [pc, #276]	; (8000bec <main+0x720>)
 8000ad8:	f7ff fbe4 	bl	80002a4 <LCD_String>
	  			LCD_Cursor(1, 7);
 8000adc:	2107      	movs	r1, #7
 8000ade:	2001      	movs	r0, #1
 8000ae0:	f7ff fb34 	bl	800014c <LCD_Cursor>
	  			LCD_String(buffer_decel);
 8000ae4:	4842      	ldr	r0, [pc, #264]	; (8000bf0 <main+0x724>)
 8000ae6:	f7ff fbdd 	bl	80002a4 <LCD_String>
	  			LCD_Cursor(1, 8);
 8000aea:	2108      	movs	r1, #8
 8000aec:	2001      	movs	r0, #1
 8000aee:	f7ff fb2d 	bl	800014c <LCD_Cursor>
	  			LCD_String("s");
 8000af2:	483c      	ldr	r0, [pc, #240]	; (8000be4 <main+0x718>)
 8000af4:	f7ff fbd6 	bl	80002a4 <LCD_String>
	  			inc_decel = 1;
 8000af8:	4b3e      	ldr	r3, [pc, #248]	; (8000bf4 <main+0x728>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	701a      	strb	r2, [r3, #0]
	  			break;
 8000afe:	e018      	b.n	8000b32 <main+0x666>

	  		case 7:
	  			LCD_Cursor(0, 0);
 8000b00:	2100      	movs	r1, #0
 8000b02:	2000      	movs	r0, #0
 8000b04:	f7ff fb22 	bl	800014c <LCD_Cursor>
	  			LCD_String("   DECEL TIME   ");
 8000b08:	4838      	ldr	r0, [pc, #224]	; (8000bec <main+0x720>)
 8000b0a:	f7ff fbcb 	bl	80002a4 <LCD_String>
	  			LCD_Cursor(1, 6);
 8000b0e:	2106      	movs	r1, #6
 8000b10:	2001      	movs	r0, #1
 8000b12:	f7ff fb1b 	bl	800014c <LCD_Cursor>
	  			LCD_String(buffer_decel);
 8000b16:	4836      	ldr	r0, [pc, #216]	; (8000bf0 <main+0x724>)
 8000b18:	f7ff fbc4 	bl	80002a4 <LCD_String>
	  			LCD_Cursor(1, 8);
 8000b1c:	2108      	movs	r1, #8
 8000b1e:	2001      	movs	r0, #1
 8000b20:	f7ff fb14 	bl	800014c <LCD_Cursor>
	  			LCD_String("s");
 8000b24:	482f      	ldr	r0, [pc, #188]	; (8000be4 <main+0x718>)
 8000b26:	f7ff fbbd 	bl	80002a4 <LCD_String>
	  			config_finish = 1;
 8000b2a:	4b33      	ldr	r3, [pc, #204]	; (8000bf8 <main+0x72c>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	701a      	strb	r2, [r3, #0]
	  			break;
 8000b30:	bf00      	nop
	  		}

	  		switch (start)
 8000b32:	4b32      	ldr	r3, [pc, #200]	; (8000bfc <main+0x730>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	2b04      	cmp	r3, #4
 8000b3a:	f63f acd4 	bhi.w	80004e6 <main+0x1a>
 8000b3e:	a201      	add	r2, pc, #4	; (adr r2, 8000b44 <main+0x678>)
 8000b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b44:	08000b59 	.word	0x08000b59
 8000b48:	08000b77 	.word	0x08000b77
 8000b4c:	08000b9b 	.word	0x08000b9b
 8000b50:	08000ba7 	.word	0x08000ba7
 8000b54:	08000bd1 	.word	0x08000bd1
	  		{

	  		case 1:
	  			LCD_Cursor(0, 2);
 8000b58:	2102      	movs	r1, #2
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	f7ff faf6 	bl	800014c <LCD_Cursor>
	  			LCD_String("DC MOTOR SYS");
 8000b60:	4827      	ldr	r0, [pc, #156]	; (8000c00 <main+0x734>)
 8000b62:	f7ff fb9f 	bl	80002a4 <LCD_String>
	  			LCD_Cursor(1, 0);
 8000b66:	2100      	movs	r1, #0
 8000b68:	2001      	movs	r0, #1
 8000b6a:	f7ff faef 	bl	800014c <LCD_Cursor>
	  			LCD_String("     START     >");
 8000b6e:	4825      	ldr	r0, [pc, #148]	; (8000c04 <main+0x738>)
 8000b70:	f7ff fb98 	bl	80002a4 <LCD_String>
	  			break;
 8000b74:	e030      	b.n	8000bd8 <main+0x70c>

	  		case 2:
	  			LCD_Cursor(0, 2);
 8000b76:	2102      	movs	r1, #2
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f7ff fae7 	bl	800014c <LCD_Cursor>
	  			LCD_String("DC MOTOR SYS");
 8000b7e:	4820      	ldr	r0, [pc, #128]	; (8000c00 <main+0x734>)
 8000b80:	f7ff fb90 	bl	80002a4 <LCD_String>
	  			LCD_Cursor(1, 0);
 8000b84:	2100      	movs	r1, #0
 8000b86:	2001      	movs	r0, #1
 8000b88:	f7ff fae0 	bl	800014c <LCD_Cursor>
	  			LCD_String("     START     >");
 8000b8c:	481d      	ldr	r0, [pc, #116]	; (8000c04 <main+0x738>)
 8000b8e:	f7ff fb89 	bl	80002a4 <LCD_String>
	  			aux_start = 1;
 8000b92:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <main+0x73c>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	701a      	strb	r2, [r3, #0]
	  			break;
 8000b98:	e01e      	b.n	8000bd8 <main+0x70c>

	  		case 3:
	  			aux_pwmPreset = 1;
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	; (8000c0c <main+0x740>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	701a      	strb	r2, [r3, #0]
	  			start_preset();
 8000ba0:	f000 f88c 	bl	8000cbc <start_preset>
	  			break;
 8000ba4:	e018      	b.n	8000bd8 <main+0x70c>

	  		case 4:
	  			LCD_Cursor(0, 2);
 8000ba6:	2102      	movs	r1, #2
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f7ff facf 	bl	800014c <LCD_Cursor>
	  			LCD_String("DC MOTOR SYS");
 8000bae:	4814      	ldr	r0, [pc, #80]	; (8000c00 <main+0x734>)
 8000bb0:	f7ff fb78 	bl	80002a4 <LCD_String>
	  			LCD_Cursor(1, 0);
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	f7ff fac8 	bl	800014c <LCD_Cursor>
	  			LCD_String("     START     >");
 8000bbc:	4811      	ldr	r0, [pc, #68]	; (8000c04 <main+0x738>)
 8000bbe:	f7ff fb71 	bl	80002a4 <LCD_String>
	  			config_init = 1;
 8000bc2:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <main+0x744>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	701a      	strb	r2, [r3, #0]
	  			config_finish = 0;
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <main+0x72c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
	  			break;
 8000bce:	e003      	b.n	8000bd8 <main+0x70c>

	  		case 5:
	  			start_config();
 8000bd0:	f000 f924 	bl	8000e1c <start_config>
	  			break;
 8000bd4:	bf00      	nop
 8000bd6:	e486      	b.n	80004e6 <main+0x1a>
	  	   if ((start == 1) && (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)))
 8000bd8:	e485      	b.n	80004e6 <main+0x1a>
 8000bda:	bf00      	nop
 8000bdc:	080035a0 	.word	0x080035a0
 8000be0:	200000ec 	.word	0x200000ec
 8000be4:	0800359c 	.word	0x0800359c
 8000be8:	200000d2 	.word	0x200000d2
 8000bec:	080035b4 	.word	0x080035b4
 8000bf0:	200000fc 	.word	0x200000fc
 8000bf4:	200000d8 	.word	0x200000d8
 8000bf8:	200000d3 	.word	0x200000d3
 8000bfc:	200000cd 	.word	0x200000cd
 8000c00:	08003568 	.word	0x08003568
 8000c04:	080035c8 	.word	0x080035c8
 8000c08:	200000cf 	.word	0x200000cf
 8000c0c:	200000da 	.word	0x200000da
 8000c10:	200000d9 	.word	0x200000d9

08000c14 <Buzzer_Teclas>:
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  void Buzzer_Teclas()
  	{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c1e:	4808      	ldr	r0, [pc, #32]	; (8000c40 <Buzzer_Teclas+0x2c>)
 8000c20:	f000 ff21 	bl	8001a66 <HAL_GPIO_WritePin>
  		HAL_Delay(50);
 8000c24:	2032      	movs	r0, #50	; 0x32
 8000c26:	f000 fc7b 	bl	8001520 <HAL_Delay>
  		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c30:	4803      	ldr	r0, [pc, #12]	; (8000c40 <Buzzer_Teclas+0x2c>)
 8000c32:	f000 ff18 	bl	8001a66 <HAL_GPIO_WritePin>
  		HAL_Delay(50);
 8000c36:	2032      	movs	r0, #50	; 0x32
 8000c38:	f000 fc72 	bl	8001520 <HAL_Delay>
  	}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40010c00 	.word	0x40010c00

08000c44 <INC_Boucing>:

  	void INC_Boucing()
  	{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  		HAL_Delay(10);
 8000c48:	200a      	movs	r0, #10
 8000c4a:	f000 fc69 	bl	8001520 <HAL_Delay>
  		while (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin));
 8000c4e:	bf00      	nop
 8000c50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c54:	4804      	ldr	r0, [pc, #16]	; (8000c68 <INC_Boucing+0x24>)
 8000c56:	f000 feef 	bl	8001a38 <HAL_GPIO_ReadPin>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d1f7      	bne.n	8000c50 <INC_Boucing+0xc>
  	}
 8000c60:	bf00      	nop
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40010c00 	.word	0x40010c00

08000c6c <DEC_Boucing>:
  	void DEC_Boucing()
  	{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  		HAL_Delay(10);
 8000c70:	200a      	movs	r0, #10
 8000c72:	f000 fc55 	bl	8001520 <HAL_Delay>
  		while (HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin));
 8000c76:	bf00      	nop
 8000c78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c7c:	4804      	ldr	r0, [pc, #16]	; (8000c90 <DEC_Boucing+0x24>)
 8000c7e:	f000 fedb 	bl	8001a38 <HAL_GPIO_ReadPin>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d1f7      	bne.n	8000c78 <DEC_Boucing+0xc>
  	}
 8000c88:	bf00      	nop
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40010c00 	.word	0x40010c00

08000c94 <ENTER_Boucing>:
  	void ENTER_Boucing()
  	{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  		HAL_Delay(10);
 8000c98:	200a      	movs	r0, #10
 8000c9a:	f000 fc41 	bl	8001520 <HAL_Delay>
  		while (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin));
 8000c9e:	bf00      	nop
 8000ca0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca4:	4804      	ldr	r0, [pc, #16]	; (8000cb8 <ENTER_Boucing+0x24>)
 8000ca6:	f000 fec7 	bl	8001a38 <HAL_GPIO_ReadPin>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d1f7      	bne.n	8000ca0 <ENTER_Boucing+0xc>
  	}
 8000cb0:	bf00      	nop
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40010c00 	.word	0x40010c00

08000cbc <start_preset>:

  	void start_preset()
  	{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  	LCD_Clear();
 8000cc0:	f7ff fbb6 	bl	8000430 <LCD_Clear>
  	LCD_Cursor(0, 0);
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f7ff fa40 	bl	800014c <LCD_Cursor>
  	LCD_String("STATUS:    ACCEL");
 8000ccc:	4846      	ldr	r0, [pc, #280]	; (8000de8 <start_preset+0x12c>)
 8000cce:	f7ff fae9 	bl	80002a4 <LCD_String>
  	LCD_Cursor(1, 0);
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f7ff fa39 	bl	800014c <LCD_Cursor>
  	LCD_String("RPM: 1000");
 8000cda:	4844      	ldr	r0, [pc, #272]	; (8000dec <start_preset+0x130>)
 8000cdc:	f7ff fae2 	bl	80002a4 <LCD_String>
  	LCD_Cursor(1, 11);
 8000ce0:	210b      	movs	r1, #11
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	f7ff fa32 	bl	800014c <LCD_Cursor>
  	LCD_String("t:");
 8000ce8:	4841      	ldr	r0, [pc, #260]	; (8000df0 <start_preset+0x134>)
 8000cea:	f7ff fadb 	bl	80002a4 <LCD_String>
  	LCD_Cursor(1, 13);
 8000cee:	210d      	movs	r1, #13
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	f7ff fa2b 	bl	800014c <LCD_Cursor>
  	LCD_String(buffer_accel);
 8000cf6:	483f      	ldr	r0, [pc, #252]	; (8000df4 <start_preset+0x138>)
 8000cf8:	f7ff fad4 	bl	80002a4 <LCD_String>
  	LCD_Cursor(1, 15);
 8000cfc:	210f      	movs	r1, #15
 8000cfe:	2001      	movs	r0, #1
 8000d00:	f7ff fa24 	bl	800014c <LCD_Cursor>
  	LCD_String("s");
 8000d04:	483c      	ldr	r0, [pc, #240]	; (8000df8 <start_preset+0x13c>)
 8000d06:	f7ff facd 	bl	80002a4 <LCD_String>
  	HAL_Delay(a_inc * 1000);
 8000d0a:	4b3c      	ldr	r3, [pc, #240]	; (8000dfc <start_preset+0x140>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	461a      	mov	r2, r3
 8000d10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d14:	fb02 f303 	mul.w	r3, r2, r3
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 fc01 	bl	8001520 <HAL_Delay>
  	LCD_Clear();
 8000d1e:	f7ff fb87 	bl	8000430 <LCD_Clear>

  	LCD_Cursor(0, 0);
 8000d22:	2100      	movs	r1, #0
 8000d24:	2000      	movs	r0, #0
 8000d26:	f7ff fa11 	bl	800014c <LCD_Cursor>
  	LCD_String("STATUS:  RUNNING");
 8000d2a:	4835      	ldr	r0, [pc, #212]	; (8000e00 <start_preset+0x144>)
 8000d2c:	f7ff faba 	bl	80002a4 <LCD_String>
  	LCD_Cursor(1, 0);
 8000d30:	2100      	movs	r1, #0
 8000d32:	2001      	movs	r0, #1
 8000d34:	f7ff fa0a 	bl	800014c <LCD_Cursor>
  	LCD_String("RPM: 1000");
 8000d38:	482c      	ldr	r0, [pc, #176]	; (8000dec <start_preset+0x130>)
 8000d3a:	f7ff fab3 	bl	80002a4 <LCD_String>
  	LCD_Cursor(1, 10);
 8000d3e:	210a      	movs	r1, #10
 8000d40:	2001      	movs	r0, #1
 8000d42:	f7ff fa03 	bl	800014c <LCD_Cursor>
  	LCD_String("t:");
 8000d46:	482a      	ldr	r0, [pc, #168]	; (8000df0 <start_preset+0x134>)
 8000d48:	f7ff faac 	bl	80002a4 <LCD_String>
  	LCD_Cursor(1, 12);
 8000d4c:	210c      	movs	r1, #12
 8000d4e:	2001      	movs	r0, #1
 8000d50:	f7ff f9fc 	bl	800014c <LCD_Cursor>
  	LCD_String(buffer_running);
 8000d54:	482b      	ldr	r0, [pc, #172]	; (8000e04 <start_preset+0x148>)
 8000d56:	f7ff faa5 	bl	80002a4 <LCD_String>
  	LCD_Cursor(1, 15);
 8000d5a:	210f      	movs	r1, #15
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f7ff f9f5 	bl	800014c <LCD_Cursor>
  	LCD_String("s");
 8000d62:	4825      	ldr	r0, [pc, #148]	; (8000df8 <start_preset+0x13c>)
 8000d64:	f7ff fa9e 	bl	80002a4 <LCD_String>
  	HAL_Delay(r_inc * 1000);
 8000d68:	4b27      	ldr	r3, [pc, #156]	; (8000e08 <start_preset+0x14c>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d72:	fb02 f303 	mul.w	r3, r2, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 fbd2 	bl	8001520 <HAL_Delay>
  	LCD_Clear();
 8000d7c:	f7ff fb58 	bl	8000430 <LCD_Clear>

  	LCD_Cursor(0, 0);
 8000d80:	2100      	movs	r1, #0
 8000d82:	2000      	movs	r0, #0
 8000d84:	f7ff f9e2 	bl	800014c <LCD_Cursor>
  	LCD_String("STATUS:    DECEL");
 8000d88:	4820      	ldr	r0, [pc, #128]	; (8000e0c <start_preset+0x150>)
 8000d8a:	f7ff fa8b 	bl	80002a4 <LCD_String>
  	LCD_Cursor(1, 0);
 8000d8e:	2100      	movs	r1, #0
 8000d90:	2001      	movs	r0, #1
 8000d92:	f7ff f9db 	bl	800014c <LCD_Cursor>
  	LCD_String("RPM: 1000");
 8000d96:	4815      	ldr	r0, [pc, #84]	; (8000dec <start_preset+0x130>)
 8000d98:	f7ff fa84 	bl	80002a4 <LCD_String>
  	LCD_Cursor(1, 11);
 8000d9c:	210b      	movs	r1, #11
 8000d9e:	2001      	movs	r0, #1
 8000da0:	f7ff f9d4 	bl	800014c <LCD_Cursor>
  	LCD_String("t:");
 8000da4:	4812      	ldr	r0, [pc, #72]	; (8000df0 <start_preset+0x134>)
 8000da6:	f7ff fa7d 	bl	80002a4 <LCD_String>
  	LCD_Cursor(1, 13);
 8000daa:	210d      	movs	r1, #13
 8000dac:	2001      	movs	r0, #1
 8000dae:	f7ff f9cd 	bl	800014c <LCD_Cursor>
  	LCD_String(buffer_decel);
 8000db2:	4817      	ldr	r0, [pc, #92]	; (8000e10 <start_preset+0x154>)
 8000db4:	f7ff fa76 	bl	80002a4 <LCD_String>
  	LCD_Cursor(1, 15);
 8000db8:	210f      	movs	r1, #15
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f7ff f9c6 	bl	800014c <LCD_Cursor>
  	LCD_String("s");
 8000dc0:	480d      	ldr	r0, [pc, #52]	; (8000df8 <start_preset+0x13c>)
 8000dc2:	f7ff fa6f 	bl	80002a4 <LCD_String>
  	HAL_Delay(d_inc * 1000);
 8000dc6:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <start_preset+0x158>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd0:	fb02 f303 	mul.w	r3, r2, r3
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f000 fba3 	bl	8001520 <HAL_Delay>
  	LCD_Clear();
 8000dda:	f7ff fb29 	bl	8000430 <LCD_Clear>
  	start = 1;
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <start_preset+0x15c>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	701a      	strb	r2, [r3, #0]
  	}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	080035dc 	.word	0x080035dc
 8000dec:	080035f0 	.word	0x080035f0
 8000df0:	080035fc 	.word	0x080035fc
 8000df4:	200000dc 	.word	0x200000dc
 8000df8:	0800359c 	.word	0x0800359c
 8000dfc:	200000d4 	.word	0x200000d4
 8000e00:	08003600 	.word	0x08003600
 8000e04:	200000ec 	.word	0x200000ec
 8000e08:	200000d5 	.word	0x200000d5
 8000e0c:	08003614 	.word	0x08003614
 8000e10:	200000fc 	.word	0x200000fc
 8000e14:	200000d6 	.word	0x200000d6
 8000e18:	200000cd 	.word	0x200000cd

08000e1c <start_config>:

  	void start_config()
  	{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  	LCD_Cursor(0, 0);
 8000e20:	2100      	movs	r1, #0
 8000e22:	2000      	movs	r0, #0
 8000e24:	f7ff f992 	bl	800014c <LCD_Cursor>
  	LCD_String("STATUS:    ACCEL");
 8000e28:	4846      	ldr	r0, [pc, #280]	; (8000f44 <start_config+0x128>)
 8000e2a:	f7ff fa3b 	bl	80002a4 <LCD_String>
  	LCD_Cursor(1, 0);
 8000e2e:	2100      	movs	r1, #0
 8000e30:	2001      	movs	r0, #1
 8000e32:	f7ff f98b 	bl	800014c <LCD_Cursor>
  	LCD_String("RPM: 1000");
 8000e36:	4844      	ldr	r0, [pc, #272]	; (8000f48 <start_config+0x12c>)
 8000e38:	f7ff fa34 	bl	80002a4 <LCD_String>
  	LCD_Cursor(1, 11);
 8000e3c:	210b      	movs	r1, #11
 8000e3e:	2001      	movs	r0, #1
 8000e40:	f7ff f984 	bl	800014c <LCD_Cursor>
  	LCD_String("t:");
 8000e44:	4841      	ldr	r0, [pc, #260]	; (8000f4c <start_config+0x130>)
 8000e46:	f7ff fa2d 	bl	80002a4 <LCD_String>
  	LCD_Cursor(1, 13);
 8000e4a:	210d      	movs	r1, #13
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	f7ff f97d 	bl	800014c <LCD_Cursor>
  	LCD_String(buffer_accel);
 8000e52:	483f      	ldr	r0, [pc, #252]	; (8000f50 <start_config+0x134>)
 8000e54:	f7ff fa26 	bl	80002a4 <LCD_String>
  	LCD_Cursor(1, 15);
 8000e58:	210f      	movs	r1, #15
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	f7ff f976 	bl	800014c <LCD_Cursor>
  	LCD_String("s");
 8000e60:	483c      	ldr	r0, [pc, #240]	; (8000f54 <start_config+0x138>)
 8000e62:	f7ff fa1f 	bl	80002a4 <LCD_String>
  	HAL_Delay(a_inc * 1000);
 8000e66:	4b3c      	ldr	r3, [pc, #240]	; (8000f58 <start_config+0x13c>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e70:	fb02 f303 	mul.w	r3, r2, r3
 8000e74:	4618      	mov	r0, r3
 8000e76:	f000 fb53 	bl	8001520 <HAL_Delay>
  	LCD_Clear();
 8000e7a:	f7ff fad9 	bl	8000430 <LCD_Clear>

  	LCD_Cursor(0, 0);
 8000e7e:	2100      	movs	r1, #0
 8000e80:	2000      	movs	r0, #0
 8000e82:	f7ff f963 	bl	800014c <LCD_Cursor>
  	LCD_String("STATUS:  RUNNING");
 8000e86:	4835      	ldr	r0, [pc, #212]	; (8000f5c <start_config+0x140>)
 8000e88:	f7ff fa0c 	bl	80002a4 <LCD_String>
  	LCD_Cursor(1, 0);
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	2001      	movs	r0, #1
 8000e90:	f7ff f95c 	bl	800014c <LCD_Cursor>
  	LCD_String("RPM: 1000");
 8000e94:	482c      	ldr	r0, [pc, #176]	; (8000f48 <start_config+0x12c>)
 8000e96:	f7ff fa05 	bl	80002a4 <LCD_String>
  	LCD_Cursor(1, 10);
 8000e9a:	210a      	movs	r1, #10
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	f7ff f955 	bl	800014c <LCD_Cursor>
  	LCD_String("t:");
 8000ea2:	482a      	ldr	r0, [pc, #168]	; (8000f4c <start_config+0x130>)
 8000ea4:	f7ff f9fe 	bl	80002a4 <LCD_String>
  	LCD_Cursor(1, 12);
 8000ea8:	210c      	movs	r1, #12
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f7ff f94e 	bl	800014c <LCD_Cursor>
  	LCD_String(buffer_running);
 8000eb0:	482b      	ldr	r0, [pc, #172]	; (8000f60 <start_config+0x144>)
 8000eb2:	f7ff f9f7 	bl	80002a4 <LCD_String>
  	LCD_Cursor(1, 15);
 8000eb6:	210f      	movs	r1, #15
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f7ff f947 	bl	800014c <LCD_Cursor>
  	LCD_String("s");
 8000ebe:	4825      	ldr	r0, [pc, #148]	; (8000f54 <start_config+0x138>)
 8000ec0:	f7ff f9f0 	bl	80002a4 <LCD_String>
  	HAL_Delay(r_inc * 1000);
 8000ec4:	4b27      	ldr	r3, [pc, #156]	; (8000f64 <start_config+0x148>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ece:	fb02 f303 	mul.w	r3, r2, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 fb24 	bl	8001520 <HAL_Delay>
  	LCD_Clear();
 8000ed8:	f7ff faaa 	bl	8000430 <LCD_Clear>

  	LCD_Cursor(0, 0);
 8000edc:	2100      	movs	r1, #0
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f7ff f934 	bl	800014c <LCD_Cursor>
  	LCD_String("STATUS:    DECEL");
 8000ee4:	4820      	ldr	r0, [pc, #128]	; (8000f68 <start_config+0x14c>)
 8000ee6:	f7ff f9dd 	bl	80002a4 <LCD_String>
  	LCD_Cursor(1, 0);
 8000eea:	2100      	movs	r1, #0
 8000eec:	2001      	movs	r0, #1
 8000eee:	f7ff f92d 	bl	800014c <LCD_Cursor>
  	LCD_String("RPM: 1000");
 8000ef2:	4815      	ldr	r0, [pc, #84]	; (8000f48 <start_config+0x12c>)
 8000ef4:	f7ff f9d6 	bl	80002a4 <LCD_String>
  	LCD_Cursor(1, 11);
 8000ef8:	210b      	movs	r1, #11
 8000efa:	2001      	movs	r0, #1
 8000efc:	f7ff f926 	bl	800014c <LCD_Cursor>
  	LCD_String("t:");
 8000f00:	4812      	ldr	r0, [pc, #72]	; (8000f4c <start_config+0x130>)
 8000f02:	f7ff f9cf 	bl	80002a4 <LCD_String>
  	LCD_Cursor(1, 13);
 8000f06:	210d      	movs	r1, #13
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f7ff f91f 	bl	800014c <LCD_Cursor>
  	LCD_String(buffer_decel);
 8000f0e:	4817      	ldr	r0, [pc, #92]	; (8000f6c <start_config+0x150>)
 8000f10:	f7ff f9c8 	bl	80002a4 <LCD_String>
  	LCD_Cursor(1, 15);
 8000f14:	210f      	movs	r1, #15
 8000f16:	2001      	movs	r0, #1
 8000f18:	f7ff f918 	bl	800014c <LCD_Cursor>
  	LCD_String("s");
 8000f1c:	480d      	ldr	r0, [pc, #52]	; (8000f54 <start_config+0x138>)
 8000f1e:	f7ff f9c1 	bl	80002a4 <LCD_String>
  	HAL_Delay(d_inc * 1000);
 8000f22:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <start_config+0x154>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	461a      	mov	r2, r3
 8000f28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2c:	fb02 f303 	mul.w	r3, r2, r3
 8000f30:	4618      	mov	r0, r3
 8000f32:	f000 faf5 	bl	8001520 <HAL_Delay>
  	LCD_Clear();
 8000f36:	f7ff fa7b 	bl	8000430 <LCD_Clear>
  	start = 4;
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <start_config+0x158>)
 8000f3c:	2204      	movs	r2, #4
 8000f3e:	701a      	strb	r2, [r3, #0]
  	}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	080035dc 	.word	0x080035dc
 8000f48:	080035f0 	.word	0x080035f0
 8000f4c:	080035fc 	.word	0x080035fc
 8000f50:	200000dc 	.word	0x200000dc
 8000f54:	0800359c 	.word	0x0800359c
 8000f58:	200000d4 	.word	0x200000d4
 8000f5c:	08003600 	.word	0x08003600
 8000f60:	200000ec 	.word	0x200000ec
 8000f64:	200000d5 	.word	0x200000d5
 8000f68:	08003614 	.word	0x08003614
 8000f6c:	200000fc 	.word	0x200000fc
 8000f70:	200000d6 	.word	0x200000d6
 8000f74:	200000cd 	.word	0x200000cd

08000f78 <sys_init>:

  	void sys_init()
  	{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  	LCD_Init();
 8000f7c:	f7ff fa5f 	bl	800043e <LCD_Init>
  	LCD_Cursor(0, 2);
 8000f80:	2102      	movs	r1, #2
 8000f82:	2000      	movs	r0, #0
 8000f84:	f7ff f8e2 	bl	800014c <LCD_Cursor>
  	LCD_String("DC MOTOR SYS");
 8000f88:	480a      	ldr	r0, [pc, #40]	; (8000fb4 <sys_init+0x3c>)
 8000f8a:	f7ff f98b 	bl	80002a4 <LCD_String>
  	LCD_Cursor(1, 2);
 8000f8e:	2102      	movs	r1, #2
 8000f90:	2001      	movs	r0, #1
 8000f92:	f7ff f8db 	bl	800014c <LCD_Cursor>
  	LCD_String("VERSION: 1.0");
 8000f96:	4808      	ldr	r0, [pc, #32]	; (8000fb8 <sys_init+0x40>)
 8000f98:	f7ff f984 	bl	80002a4 <LCD_String>
  	HAL_Delay(3000);
 8000f9c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000fa0:	f000 fabe 	bl	8001520 <HAL_Delay>
  	LCD_Clear();
 8000fa4:	f7ff fa44 	bl	8000430 <LCD_Clear>
  	start = 1;
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <sys_init+0x44>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	701a      	strb	r2, [r3, #0]
  	}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	08003568 	.word	0x08003568
 8000fb8:	08003628 	.word	0x08003628
 8000fbc:	200000cd 	.word	0x200000cd

08000fc0 <set_converter>:

  	void set_converter()
  	{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  	a_inc = a_inc;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <set_converter+0x4c>)
 8000fc6:	781a      	ldrb	r2, [r3, #0]
 8000fc8:	4b10      	ldr	r3, [pc, #64]	; (800100c <set_converter+0x4c>)
 8000fca:	701a      	strb	r2, [r3, #0]
  	sprintf(buffer_accel, "%d", a_inc);
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <set_converter+0x4c>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	490f      	ldr	r1, [pc, #60]	; (8001010 <set_converter+0x50>)
 8000fd4:	480f      	ldr	r0, [pc, #60]	; (8001014 <set_converter+0x54>)
 8000fd6:	f001 fe07 	bl	8002be8 <siprintf>
  	r_inc = r_inc;
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <set_converter+0x58>)
 8000fdc:	781a      	ldrb	r2, [r3, #0]
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <set_converter+0x58>)
 8000fe0:	701a      	strb	r2, [r3, #0]
  	sprintf(buffer_running, "%d", r_inc);
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <set_converter+0x58>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	4909      	ldr	r1, [pc, #36]	; (8001010 <set_converter+0x50>)
 8000fea:	480c      	ldr	r0, [pc, #48]	; (800101c <set_converter+0x5c>)
 8000fec:	f001 fdfc 	bl	8002be8 <siprintf>
  	d_inc = d_inc;
 8000ff0:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <set_converter+0x60>)
 8000ff2:	781a      	ldrb	r2, [r3, #0]
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <set_converter+0x60>)
 8000ff6:	701a      	strb	r2, [r3, #0]
  	sprintf(buffer_decel, "%d", d_inc);
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <set_converter+0x60>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4904      	ldr	r1, [pc, #16]	; (8001010 <set_converter+0x50>)
 8001000:	4808      	ldr	r0, [pc, #32]	; (8001024 <set_converter+0x64>)
 8001002:	f001 fdf1 	bl	8002be8 <siprintf>
  	}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200000d4 	.word	0x200000d4
 8001010:	08003564 	.word	0x08003564
 8001014:	200000dc 	.word	0x200000dc
 8001018:	200000d5 	.word	0x200000d5
 800101c:	200000ec 	.word	0x200000ec
 8001020:	200000d6 	.word	0x200000d6
 8001024:	200000fc 	.word	0x200000fc

08001028 <converter_preset>:

  	void converter_preset()
  	{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	a_inc = 10;
 800102c:	4b0f      	ldr	r3, [pc, #60]	; (800106c <converter_preset+0x44>)
 800102e:	220a      	movs	r2, #10
 8001030:	701a      	strb	r2, [r3, #0]
	sprintf(buffer_accel, "%d", a_inc);
 8001032:	4b0e      	ldr	r3, [pc, #56]	; (800106c <converter_preset+0x44>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	461a      	mov	r2, r3
 8001038:	490d      	ldr	r1, [pc, #52]	; (8001070 <converter_preset+0x48>)
 800103a:	480e      	ldr	r0, [pc, #56]	; (8001074 <converter_preset+0x4c>)
 800103c:	f001 fdd4 	bl	8002be8 <siprintf>
	r_inc = 120;
 8001040:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <converter_preset+0x50>)
 8001042:	2278      	movs	r2, #120	; 0x78
 8001044:	701a      	strb	r2, [r3, #0]
	sprintf(buffer_running, "%d", r_inc);
 8001046:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <converter_preset+0x50>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	461a      	mov	r2, r3
 800104c:	4908      	ldr	r1, [pc, #32]	; (8001070 <converter_preset+0x48>)
 800104e:	480b      	ldr	r0, [pc, #44]	; (800107c <converter_preset+0x54>)
 8001050:	f001 fdca 	bl	8002be8 <siprintf>
	d_inc = 10;
 8001054:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <converter_preset+0x58>)
 8001056:	220a      	movs	r2, #10
 8001058:	701a      	strb	r2, [r3, #0]
	sprintf(buffer_decel, "%d", d_inc);
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <converter_preset+0x58>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	4903      	ldr	r1, [pc, #12]	; (8001070 <converter_preset+0x48>)
 8001062:	4808      	ldr	r0, [pc, #32]	; (8001084 <converter_preset+0x5c>)
 8001064:	f001 fdc0 	bl	8002be8 <siprintf>

  	}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	200000d4 	.word	0x200000d4
 8001070:	08003564 	.word	0x08003564
 8001074:	200000dc 	.word	0x200000dc
 8001078:	200000d5 	.word	0x200000d5
 800107c:	200000ec 	.word	0x200000ec
 8001080:	200000d6 	.word	0x200000d6
 8001084:	200000fc 	.word	0x200000fc

08001088 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b090      	sub	sp, #64	; 0x40
 800108c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108e:	f107 0318 	add.w	r3, r7, #24
 8001092:	2228      	movs	r2, #40	; 0x28
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f001 fdc6 	bl	8002c28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010aa:	2302      	movs	r3, #2
 80010ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ae:	2301      	movs	r3, #1
 80010b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010b2:	2310      	movs	r3, #16
 80010b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ba:	f107 0318 	add.w	r3, r7, #24
 80010be:	4618      	mov	r0, r3
 80010c0:	f001 f996 	bl	80023f0 <HAL_RCC_OscConfig>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <SystemClock_Config+0x46>
  {
    Error_Handler();
 80010ca:	f000 f8b5 	bl	8001238 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ce:	230f      	movs	r3, #15
 80010d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f001 fc04 	bl	80028f4 <HAL_RCC_ClockConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80010f2:	f000 f8a1 	bl	8001238 <Error_Handler>
  }
}
 80010f6:	bf00      	nop
 80010f8:	3740      	adds	r7, #64	; 0x40
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <MX_I2C1_Init+0x50>)
 8001106:	4a13      	ldr	r2, [pc, #76]	; (8001154 <MX_I2C1_Init+0x54>)
 8001108:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <MX_I2C1_Init+0x50>)
 800110c:	4a12      	ldr	r2, [pc, #72]	; (8001158 <MX_I2C1_Init+0x58>)
 800110e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001110:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <MX_I2C1_Init+0x50>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <MX_I2C1_Init+0x50>)
 8001118:	2200      	movs	r2, #0
 800111a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <MX_I2C1_Init+0x50>)
 800111e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001122:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001124:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <MX_I2C1_Init+0x50>)
 8001126:	2200      	movs	r2, #0
 8001128:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <MX_I2C1_Init+0x50>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001130:	4b07      	ldr	r3, [pc, #28]	; (8001150 <MX_I2C1_Init+0x50>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <MX_I2C1_Init+0x50>)
 8001138:	2200      	movs	r2, #0
 800113a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800113c:	4804      	ldr	r0, [pc, #16]	; (8001150 <MX_I2C1_Init+0x50>)
 800113e:	f000 fcab 	bl	8001a98 <HAL_I2C_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001148:	f000 f876 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000078 	.word	0x20000078
 8001154:	40005400 	.word	0x40005400
 8001158:	000186a0 	.word	0x000186a0

0800115c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001162:	f107 0310 	add.w	r3, r7, #16
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001170:	4b2e      	ldr	r3, [pc, #184]	; (800122c <MX_GPIO_Init+0xd0>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	4a2d      	ldr	r2, [pc, #180]	; (800122c <MX_GPIO_Init+0xd0>)
 8001176:	f043 0320 	orr.w	r3, r3, #32
 800117a:	6193      	str	r3, [r2, #24]
 800117c:	4b2b      	ldr	r3, [pc, #172]	; (800122c <MX_GPIO_Init+0xd0>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f003 0320 	and.w	r3, r3, #32
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001188:	4b28      	ldr	r3, [pc, #160]	; (800122c <MX_GPIO_Init+0xd0>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	4a27      	ldr	r2, [pc, #156]	; (800122c <MX_GPIO_Init+0xd0>)
 800118e:	f043 0304 	orr.w	r3, r3, #4
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4b25      	ldr	r3, [pc, #148]	; (800122c <MX_GPIO_Init+0xd0>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a0:	4b22      	ldr	r3, [pc, #136]	; (800122c <MX_GPIO_Init+0xd0>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	4a21      	ldr	r2, [pc, #132]	; (800122c <MX_GPIO_Init+0xd0>)
 80011a6:	f043 0308 	orr.w	r3, r3, #8
 80011aa:	6193      	str	r3, [r2, #24]
 80011ac:	4b1f      	ldr	r3, [pc, #124]	; (800122c <MX_GPIO_Init+0xd0>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	f003 0308 	and.w	r3, r3, #8
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_Pin|RS_Pin|D4_Pin|D5_Pin
 80011b8:	2200      	movs	r2, #0
 80011ba:	21f9      	movs	r1, #249	; 0xf9
 80011bc:	481c      	ldr	r0, [pc, #112]	; (8001230 <MX_GPIO_Init+0xd4>)
 80011be:	f000 fc52 	bl	8001a66 <HAL_GPIO_WritePin>
                          |D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011c8:	481a      	ldr	r0, [pc, #104]	; (8001234 <MX_GPIO_Init+0xd8>)
 80011ca:	f000 fc4c 	bl	8001a66 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EN_Pin RS_Pin D4_Pin D5_Pin
                           D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = EN_Pin|RS_Pin|D4_Pin|D5_Pin
 80011ce:	23f9      	movs	r3, #249	; 0xf9
 80011d0:	613b      	str	r3, [r7, #16]
                          |D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d2:	2301      	movs	r3, #1
 80011d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	2302      	movs	r3, #2
 80011dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011de:	f107 0310 	add.w	r3, r7, #16
 80011e2:	4619      	mov	r1, r3
 80011e4:	4812      	ldr	r0, [pc, #72]	; (8001230 <MX_GPIO_Init+0xd4>)
 80011e6:	f000 faa3 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 80011ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f0:	2301      	movs	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2302      	movs	r3, #2
 80011fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	4619      	mov	r1, r3
 8001202:	480c      	ldr	r0, [pc, #48]	; (8001234 <MX_GPIO_Init+0xd8>)
 8001204:	f000 fa94 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : INC_Pin ENTER_Pin DEC_Pin */
  GPIO_InitStruct.Pin = INC_Pin|ENTER_Pin|DEC_Pin;
 8001208:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800120c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001216:	f107 0310 	add.w	r3, r7, #16
 800121a:	4619      	mov	r1, r3
 800121c:	4805      	ldr	r0, [pc, #20]	; (8001234 <MX_GPIO_Init+0xd8>)
 800121e:	f000 fa87 	bl	8001730 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001222:	bf00      	nop
 8001224:	3720      	adds	r7, #32
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40021000 	.word	0x40021000
 8001230:	40010800 	.word	0x40010800
 8001234:	40010c00 	.word	0x40010c00

08001238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800123c:	b672      	cpsid	i
}
 800123e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
   while (1)
 8001240:	e7fe      	b.n	8001240 <Error_Handler+0x8>
	...

08001244 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <HAL_MspInit+0x5c>)
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	4a14      	ldr	r2, [pc, #80]	; (80012a0 <HAL_MspInit+0x5c>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6193      	str	r3, [r2, #24]
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <HAL_MspInit+0x5c>)
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <HAL_MspInit+0x5c>)
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	4a0e      	ldr	r2, [pc, #56]	; (80012a0 <HAL_MspInit+0x5c>)
 8001268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800126c:	61d3      	str	r3, [r2, #28]
 800126e:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <HAL_MspInit+0x5c>)
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <HAL_MspInit+0x60>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	4a04      	ldr	r2, [pc, #16]	; (80012a4 <HAL_MspInit+0x60>)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001296:	bf00      	nop
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40010000 	.word	0x40010000

080012a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	; 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a1d      	ldr	r2, [pc, #116]	; (8001338 <HAL_I2C_MspInit+0x90>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d132      	bne.n	800132e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c8:	4b1c      	ldr	r3, [pc, #112]	; (800133c <HAL_I2C_MspInit+0x94>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a1b      	ldr	r2, [pc, #108]	; (800133c <HAL_I2C_MspInit+0x94>)
 80012ce:	f043 0308 	orr.w	r3, r3, #8
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b19      	ldr	r3, [pc, #100]	; (800133c <HAL_I2C_MspInit+0x94>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0308 	and.w	r3, r3, #8
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012e6:	2312      	movs	r3, #18
 80012e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012ea:	2303      	movs	r3, #3
 80012ec:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	4619      	mov	r1, r3
 80012f4:	4812      	ldr	r0, [pc, #72]	; (8001340 <HAL_I2C_MspInit+0x98>)
 80012f6:	f000 fa1b 	bl	8001730 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80012fa:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_I2C_MspInit+0x9c>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001302:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
 8001308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130a:	f043 0302 	orr.w	r3, r3, #2
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
 8001310:	4a0c      	ldr	r2, [pc, #48]	; (8001344 <HAL_I2C_MspInit+0x9c>)
 8001312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001314:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <HAL_I2C_MspInit+0x94>)
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	4a08      	ldr	r2, [pc, #32]	; (800133c <HAL_I2C_MspInit+0x94>)
 800131c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001320:	61d3      	str	r3, [r2, #28]
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_I2C_MspInit+0x94>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800132e:	bf00      	nop
 8001330:	3728      	adds	r7, #40	; 0x28
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40005400 	.word	0x40005400
 800133c:	40021000 	.word	0x40021000
 8001340:	40010c00 	.word	0x40010c00
 8001344:	40010000 	.word	0x40010000

08001348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800134c:	e7fe      	b.n	800134c <NMI_Handler+0x4>

0800134e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001352:	e7fe      	b.n	8001352 <HardFault_Handler+0x4>

08001354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001358:	e7fe      	b.n	8001358 <MemManage_Handler+0x4>

0800135a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135e:	e7fe      	b.n	800135e <BusFault_Handler+0x4>

08001360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <UsageFault_Handler+0x4>

08001366 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr

08001372 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr

0800137e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr

0800138a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800138e:	f000 f8ab 	bl	80014e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a0:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <_sbrk+0x5c>)
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <_sbrk+0x60>)
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <_sbrk+0x64>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d102      	bne.n	80013ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <_sbrk+0x64>)
 80013b6:	4a12      	ldr	r2, [pc, #72]	; (8001400 <_sbrk+0x68>)
 80013b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <_sbrk+0x64>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d207      	bcs.n	80013d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c8:	f001 fc36 	bl	8002c38 <__errno>
 80013cc:	4603      	mov	r3, r0
 80013ce:	220c      	movs	r2, #12
 80013d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
 80013d6:	e009      	b.n	80013ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <_sbrk+0x64>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013de:	4b07      	ldr	r3, [pc, #28]	; (80013fc <_sbrk+0x64>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	4a05      	ldr	r2, [pc, #20]	; (80013fc <_sbrk+0x64>)
 80013e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ea:	68fb      	ldr	r3, [r7, #12]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20005000 	.word	0x20005000
 80013f8:	00000400 	.word	0x00000400
 80013fc:	2000010c 	.word	0x2000010c
 8001400:	20000260 	.word	0x20000260

08001404 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr

08001410 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001410:	f7ff fff8 	bl	8001404 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001414:	480b      	ldr	r0, [pc, #44]	; (8001444 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001416:	490c      	ldr	r1, [pc, #48]	; (8001448 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001418:	4a0c      	ldr	r2, [pc, #48]	; (800144c <LoopFillZerobss+0x16>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800141c:	e002      	b.n	8001424 <LoopCopyDataInit>

0800141e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800141e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001422:	3304      	adds	r3, #4

08001424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001428:	d3f9      	bcc.n	800141e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800142a:	4a09      	ldr	r2, [pc, #36]	; (8001450 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800142c:	4c09      	ldr	r4, [pc, #36]	; (8001454 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800142e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001430:	e001      	b.n	8001436 <LoopFillZerobss>

08001432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001434:	3204      	adds	r2, #4

08001436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001438:	d3fb      	bcc.n	8001432 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800143a:	f001 fc03 	bl	8002c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800143e:	f7ff f845 	bl	80004cc <main>
  bx lr
 8001442:	4770      	bx	lr
  ldr r0, =_sdata
 8001444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001448:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800144c:	080036a0 	.word	0x080036a0
  ldr r2, =_sbss
 8001450:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001454:	2000025c 	.word	0x2000025c

08001458 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001458:	e7fe      	b.n	8001458 <ADC1_2_IRQHandler>
	...

0800145c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001460:	4b08      	ldr	r3, [pc, #32]	; (8001484 <HAL_Init+0x28>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a07      	ldr	r2, [pc, #28]	; (8001484 <HAL_Init+0x28>)
 8001466:	f043 0310 	orr.w	r3, r3, #16
 800146a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800146c:	2003      	movs	r0, #3
 800146e:	f000 f92b 	bl	80016c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001472:	200f      	movs	r0, #15
 8001474:	f000 f808 	bl	8001488 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001478:	f7ff fee4 	bl	8001244 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40022000 	.word	0x40022000

08001488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <HAL_InitTick+0x54>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <HAL_InitTick+0x58>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	4619      	mov	r1, r3
 800149a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800149e:	fbb3 f3f1 	udiv	r3, r3, r1
 80014a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 f935 	bl	8001716 <HAL_SYSTICK_Config>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e00e      	b.n	80014d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b0f      	cmp	r3, #15
 80014ba:	d80a      	bhi.n	80014d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014bc:	2200      	movs	r2, #0
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	f04f 30ff 	mov.w	r0, #4294967295
 80014c4:	f000 f90b 	bl	80016de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014c8:	4a06      	ldr	r2, [pc, #24]	; (80014e4 <HAL_InitTick+0x5c>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ce:	2300      	movs	r3, #0
 80014d0:	e000      	b.n	80014d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000000 	.word	0x20000000
 80014e0:	20000008 	.word	0x20000008
 80014e4:	20000004 	.word	0x20000004

080014e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <HAL_IncTick+0x1c>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b05      	ldr	r3, [pc, #20]	; (8001508 <HAL_IncTick+0x20>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4413      	add	r3, r2
 80014f8:	4a03      	ldr	r2, [pc, #12]	; (8001508 <HAL_IncTick+0x20>)
 80014fa:	6013      	str	r3, [r2, #0]
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr
 8001504:	20000008 	.word	0x20000008
 8001508:	20000110 	.word	0x20000110

0800150c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return uwTick;
 8001510:	4b02      	ldr	r3, [pc, #8]	; (800151c <HAL_GetTick+0x10>)
 8001512:	681b      	ldr	r3, [r3, #0]
}
 8001514:	4618      	mov	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	20000110 	.word	0x20000110

08001520 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001528:	f7ff fff0 	bl	800150c <HAL_GetTick>
 800152c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001538:	d005      	beq.n	8001546 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800153a:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <HAL_Delay+0x44>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	461a      	mov	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4413      	add	r3, r2
 8001544:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001546:	bf00      	nop
 8001548:	f7ff ffe0 	bl	800150c <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	429a      	cmp	r2, r3
 8001556:	d8f7      	bhi.n	8001548 <HAL_Delay+0x28>
  {
  }
}
 8001558:	bf00      	nop
 800155a:	bf00      	nop
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000008 	.word	0x20000008

08001568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <__NVIC_SetPriorityGrouping+0x44>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800157e:	68ba      	ldr	r2, [r7, #8]
 8001580:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001584:	4013      	ands	r3, r2
 8001586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001590:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800159a:	4a04      	ldr	r2, [pc, #16]	; (80015ac <__NVIC_SetPriorityGrouping+0x44>)
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	60d3      	str	r3, [r2, #12]
}
 80015a0:	bf00      	nop
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b4:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <__NVIC_GetPriorityGrouping+0x18>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	0a1b      	lsrs	r3, r3, #8
 80015ba:	f003 0307 	and.w	r3, r3, #7
}
 80015be:	4618      	mov	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	6039      	str	r1, [r7, #0]
 80015d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	db0a      	blt.n	80015f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	490c      	ldr	r1, [pc, #48]	; (8001618 <__NVIC_SetPriority+0x4c>)
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	0112      	lsls	r2, r2, #4
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	440b      	add	r3, r1
 80015f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f4:	e00a      	b.n	800160c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	4908      	ldr	r1, [pc, #32]	; (800161c <__NVIC_SetPriority+0x50>)
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	f003 030f 	and.w	r3, r3, #15
 8001602:	3b04      	subs	r3, #4
 8001604:	0112      	lsls	r2, r2, #4
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	440b      	add	r3, r1
 800160a:	761a      	strb	r2, [r3, #24]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	e000e100 	.word	0xe000e100
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001620:	b480      	push	{r7}
 8001622:	b089      	sub	sp, #36	; 0x24
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f1c3 0307 	rsb	r3, r3, #7
 800163a:	2b04      	cmp	r3, #4
 800163c:	bf28      	it	cs
 800163e:	2304      	movcs	r3, #4
 8001640:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	3304      	adds	r3, #4
 8001646:	2b06      	cmp	r3, #6
 8001648:	d902      	bls.n	8001650 <NVIC_EncodePriority+0x30>
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3b03      	subs	r3, #3
 800164e:	e000      	b.n	8001652 <NVIC_EncodePriority+0x32>
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001654:	f04f 32ff 	mov.w	r2, #4294967295
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43da      	mvns	r2, r3
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	401a      	ands	r2, r3
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001668:	f04f 31ff 	mov.w	r1, #4294967295
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	fa01 f303 	lsl.w	r3, r1, r3
 8001672:	43d9      	mvns	r1, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001678:	4313      	orrs	r3, r2
         );
}
 800167a:	4618      	mov	r0, r3
 800167c:	3724      	adds	r7, #36	; 0x24
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr

08001684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3b01      	subs	r3, #1
 8001690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001694:	d301      	bcc.n	800169a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001696:	2301      	movs	r3, #1
 8001698:	e00f      	b.n	80016ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800169a:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <SysTick_Config+0x40>)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3b01      	subs	r3, #1
 80016a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016a2:	210f      	movs	r1, #15
 80016a4:	f04f 30ff 	mov.w	r0, #4294967295
 80016a8:	f7ff ff90 	bl	80015cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <SysTick_Config+0x40>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016b2:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <SysTick_Config+0x40>)
 80016b4:	2207      	movs	r2, #7
 80016b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	e000e010 	.word	0xe000e010

080016c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff ff49 	bl	8001568 <__NVIC_SetPriorityGrouping>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016de:	b580      	push	{r7, lr}
 80016e0:	b086      	sub	sp, #24
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	4603      	mov	r3, r0
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
 80016ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016f0:	f7ff ff5e 	bl	80015b0 <__NVIC_GetPriorityGrouping>
 80016f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	68b9      	ldr	r1, [r7, #8]
 80016fa:	6978      	ldr	r0, [r7, #20]
 80016fc:	f7ff ff90 	bl	8001620 <NVIC_EncodePriority>
 8001700:	4602      	mov	r2, r0
 8001702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001706:	4611      	mov	r1, r2
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ff5f 	bl	80015cc <__NVIC_SetPriority>
}
 800170e:	bf00      	nop
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff ffb0 	bl	8001684 <SysTick_Config>
 8001724:	4603      	mov	r3, r0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001730:	b480      	push	{r7}
 8001732:	b08b      	sub	sp, #44	; 0x2c
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800173a:	2300      	movs	r3, #0
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800173e:	2300      	movs	r3, #0
 8001740:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001742:	e169      	b.n	8001a18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001744:	2201      	movs	r2, #1
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	69fa      	ldr	r2, [r7, #28]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	429a      	cmp	r2, r3
 800175e:	f040 8158 	bne.w	8001a12 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	4a9a      	ldr	r2, [pc, #616]	; (80019d0 <HAL_GPIO_Init+0x2a0>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d05e      	beq.n	800182a <HAL_GPIO_Init+0xfa>
 800176c:	4a98      	ldr	r2, [pc, #608]	; (80019d0 <HAL_GPIO_Init+0x2a0>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d875      	bhi.n	800185e <HAL_GPIO_Init+0x12e>
 8001772:	4a98      	ldr	r2, [pc, #608]	; (80019d4 <HAL_GPIO_Init+0x2a4>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d058      	beq.n	800182a <HAL_GPIO_Init+0xfa>
 8001778:	4a96      	ldr	r2, [pc, #600]	; (80019d4 <HAL_GPIO_Init+0x2a4>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d86f      	bhi.n	800185e <HAL_GPIO_Init+0x12e>
 800177e:	4a96      	ldr	r2, [pc, #600]	; (80019d8 <HAL_GPIO_Init+0x2a8>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d052      	beq.n	800182a <HAL_GPIO_Init+0xfa>
 8001784:	4a94      	ldr	r2, [pc, #592]	; (80019d8 <HAL_GPIO_Init+0x2a8>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d869      	bhi.n	800185e <HAL_GPIO_Init+0x12e>
 800178a:	4a94      	ldr	r2, [pc, #592]	; (80019dc <HAL_GPIO_Init+0x2ac>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d04c      	beq.n	800182a <HAL_GPIO_Init+0xfa>
 8001790:	4a92      	ldr	r2, [pc, #584]	; (80019dc <HAL_GPIO_Init+0x2ac>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d863      	bhi.n	800185e <HAL_GPIO_Init+0x12e>
 8001796:	4a92      	ldr	r2, [pc, #584]	; (80019e0 <HAL_GPIO_Init+0x2b0>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d046      	beq.n	800182a <HAL_GPIO_Init+0xfa>
 800179c:	4a90      	ldr	r2, [pc, #576]	; (80019e0 <HAL_GPIO_Init+0x2b0>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d85d      	bhi.n	800185e <HAL_GPIO_Init+0x12e>
 80017a2:	2b12      	cmp	r3, #18
 80017a4:	d82a      	bhi.n	80017fc <HAL_GPIO_Init+0xcc>
 80017a6:	2b12      	cmp	r3, #18
 80017a8:	d859      	bhi.n	800185e <HAL_GPIO_Init+0x12e>
 80017aa:	a201      	add	r2, pc, #4	; (adr r2, 80017b0 <HAL_GPIO_Init+0x80>)
 80017ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b0:	0800182b 	.word	0x0800182b
 80017b4:	08001805 	.word	0x08001805
 80017b8:	08001817 	.word	0x08001817
 80017bc:	08001859 	.word	0x08001859
 80017c0:	0800185f 	.word	0x0800185f
 80017c4:	0800185f 	.word	0x0800185f
 80017c8:	0800185f 	.word	0x0800185f
 80017cc:	0800185f 	.word	0x0800185f
 80017d0:	0800185f 	.word	0x0800185f
 80017d4:	0800185f 	.word	0x0800185f
 80017d8:	0800185f 	.word	0x0800185f
 80017dc:	0800185f 	.word	0x0800185f
 80017e0:	0800185f 	.word	0x0800185f
 80017e4:	0800185f 	.word	0x0800185f
 80017e8:	0800185f 	.word	0x0800185f
 80017ec:	0800185f 	.word	0x0800185f
 80017f0:	0800185f 	.word	0x0800185f
 80017f4:	0800180d 	.word	0x0800180d
 80017f8:	08001821 	.word	0x08001821
 80017fc:	4a79      	ldr	r2, [pc, #484]	; (80019e4 <HAL_GPIO_Init+0x2b4>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d013      	beq.n	800182a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001802:	e02c      	b.n	800185e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	623b      	str	r3, [r7, #32]
          break;
 800180a:	e029      	b.n	8001860 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	3304      	adds	r3, #4
 8001812:	623b      	str	r3, [r7, #32]
          break;
 8001814:	e024      	b.n	8001860 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	3308      	adds	r3, #8
 800181c:	623b      	str	r3, [r7, #32]
          break;
 800181e:	e01f      	b.n	8001860 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	330c      	adds	r3, #12
 8001826:	623b      	str	r3, [r7, #32]
          break;
 8001828:	e01a      	b.n	8001860 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d102      	bne.n	8001838 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001832:	2304      	movs	r3, #4
 8001834:	623b      	str	r3, [r7, #32]
          break;
 8001836:	e013      	b.n	8001860 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d105      	bne.n	800184c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001840:	2308      	movs	r3, #8
 8001842:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69fa      	ldr	r2, [r7, #28]
 8001848:	611a      	str	r2, [r3, #16]
          break;
 800184a:	e009      	b.n	8001860 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800184c:	2308      	movs	r3, #8
 800184e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69fa      	ldr	r2, [r7, #28]
 8001854:	615a      	str	r2, [r3, #20]
          break;
 8001856:	e003      	b.n	8001860 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001858:	2300      	movs	r3, #0
 800185a:	623b      	str	r3, [r7, #32]
          break;
 800185c:	e000      	b.n	8001860 <HAL_GPIO_Init+0x130>
          break;
 800185e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	2bff      	cmp	r3, #255	; 0xff
 8001864:	d801      	bhi.n	800186a <HAL_GPIO_Init+0x13a>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	e001      	b.n	800186e <HAL_GPIO_Init+0x13e>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	3304      	adds	r3, #4
 800186e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	2bff      	cmp	r3, #255	; 0xff
 8001874:	d802      	bhi.n	800187c <HAL_GPIO_Init+0x14c>
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	e002      	b.n	8001882 <HAL_GPIO_Init+0x152>
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	3b08      	subs	r3, #8
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	210f      	movs	r1, #15
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	fa01 f303 	lsl.w	r3, r1, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	401a      	ands	r2, r3
 8001894:	6a39      	ldr	r1, [r7, #32]
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	fa01 f303 	lsl.w	r3, r1, r3
 800189c:	431a      	orrs	r2, r3
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f000 80b1 	beq.w	8001a12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018b0:	4b4d      	ldr	r3, [pc, #308]	; (80019e8 <HAL_GPIO_Init+0x2b8>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	4a4c      	ldr	r2, [pc, #304]	; (80019e8 <HAL_GPIO_Init+0x2b8>)
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	6193      	str	r3, [r2, #24]
 80018bc:	4b4a      	ldr	r3, [pc, #296]	; (80019e8 <HAL_GPIO_Init+0x2b8>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018c8:	4a48      	ldr	r2, [pc, #288]	; (80019ec <HAL_GPIO_Init+0x2bc>)
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	089b      	lsrs	r3, r3, #2
 80018ce:	3302      	adds	r3, #2
 80018d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	f003 0303 	and.w	r3, r3, #3
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	220f      	movs	r2, #15
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	4013      	ands	r3, r2
 80018ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a40      	ldr	r2, [pc, #256]	; (80019f0 <HAL_GPIO_Init+0x2c0>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d013      	beq.n	800191c <HAL_GPIO_Init+0x1ec>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a3f      	ldr	r2, [pc, #252]	; (80019f4 <HAL_GPIO_Init+0x2c4>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d00d      	beq.n	8001918 <HAL_GPIO_Init+0x1e8>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a3e      	ldr	r2, [pc, #248]	; (80019f8 <HAL_GPIO_Init+0x2c8>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d007      	beq.n	8001914 <HAL_GPIO_Init+0x1e4>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a3d      	ldr	r2, [pc, #244]	; (80019fc <HAL_GPIO_Init+0x2cc>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d101      	bne.n	8001910 <HAL_GPIO_Init+0x1e0>
 800190c:	2303      	movs	r3, #3
 800190e:	e006      	b.n	800191e <HAL_GPIO_Init+0x1ee>
 8001910:	2304      	movs	r3, #4
 8001912:	e004      	b.n	800191e <HAL_GPIO_Init+0x1ee>
 8001914:	2302      	movs	r3, #2
 8001916:	e002      	b.n	800191e <HAL_GPIO_Init+0x1ee>
 8001918:	2301      	movs	r3, #1
 800191a:	e000      	b.n	800191e <HAL_GPIO_Init+0x1ee>
 800191c:	2300      	movs	r3, #0
 800191e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001920:	f002 0203 	and.w	r2, r2, #3
 8001924:	0092      	lsls	r2, r2, #2
 8001926:	4093      	lsls	r3, r2
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	4313      	orrs	r3, r2
 800192c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800192e:	492f      	ldr	r1, [pc, #188]	; (80019ec <HAL_GPIO_Init+0x2bc>)
 8001930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001932:	089b      	lsrs	r3, r3, #2
 8001934:	3302      	adds	r3, #2
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d006      	beq.n	8001956 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001948:	4b2d      	ldr	r3, [pc, #180]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	492c      	ldr	r1, [pc, #176]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	4313      	orrs	r3, r2
 8001952:	608b      	str	r3, [r1, #8]
 8001954:	e006      	b.n	8001964 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001956:	4b2a      	ldr	r3, [pc, #168]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 8001958:	689a      	ldr	r2, [r3, #8]
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	43db      	mvns	r3, r3
 800195e:	4928      	ldr	r1, [pc, #160]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 8001960:	4013      	ands	r3, r2
 8001962:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d006      	beq.n	800197e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001970:	4b23      	ldr	r3, [pc, #140]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 8001972:	68da      	ldr	r2, [r3, #12]
 8001974:	4922      	ldr	r1, [pc, #136]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	4313      	orrs	r3, r2
 800197a:	60cb      	str	r3, [r1, #12]
 800197c:	e006      	b.n	800198c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800197e:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 8001980:	68da      	ldr	r2, [r3, #12]
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	43db      	mvns	r3, r3
 8001986:	491e      	ldr	r1, [pc, #120]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 8001988:	4013      	ands	r3, r2
 800198a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d006      	beq.n	80019a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001998:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	4918      	ldr	r1, [pc, #96]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	604b      	str	r3, [r1, #4]
 80019a4:	e006      	b.n	80019b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019a6:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	4914      	ldr	r1, [pc, #80]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 80019b0:	4013      	ands	r3, r2
 80019b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d021      	beq.n	8001a04 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019c0:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	490e      	ldr	r1, [pc, #56]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	600b      	str	r3, [r1, #0]
 80019cc:	e021      	b.n	8001a12 <HAL_GPIO_Init+0x2e2>
 80019ce:	bf00      	nop
 80019d0:	10320000 	.word	0x10320000
 80019d4:	10310000 	.word	0x10310000
 80019d8:	10220000 	.word	0x10220000
 80019dc:	10210000 	.word	0x10210000
 80019e0:	10120000 	.word	0x10120000
 80019e4:	10110000 	.word	0x10110000
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40010000 	.word	0x40010000
 80019f0:	40010800 	.word	0x40010800
 80019f4:	40010c00 	.word	0x40010c00
 80019f8:	40011000 	.word	0x40011000
 80019fc:	40011400 	.word	0x40011400
 8001a00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <HAL_GPIO_Init+0x304>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	4909      	ldr	r1, [pc, #36]	; (8001a34 <HAL_GPIO_Init+0x304>)
 8001a0e:	4013      	ands	r3, r2
 8001a10:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	3301      	adds	r3, #1
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f47f ae8e 	bne.w	8001744 <HAL_GPIO_Init+0x14>
  }
}
 8001a28:	bf00      	nop
 8001a2a:	bf00      	nop
 8001a2c:	372c      	adds	r7, #44	; 0x2c
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	40010400 	.word	0x40010400

08001a38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	887b      	ldrh	r3, [r7, #2]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d002      	beq.n	8001a56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a50:	2301      	movs	r3, #1
 8001a52:	73fb      	strb	r3, [r7, #15]
 8001a54:	e001      	b.n	8001a5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a56:	2300      	movs	r3, #0
 8001a58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr

08001a66 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
 8001a6e:	460b      	mov	r3, r1
 8001a70:	807b      	strh	r3, [r7, #2]
 8001a72:	4613      	mov	r3, r2
 8001a74:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a76:	787b      	ldrb	r3, [r7, #1]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a7c:	887a      	ldrh	r2, [r7, #2]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a82:	e003      	b.n	8001a8c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a84:	887b      	ldrh	r3, [r7, #2]
 8001a86:	041a      	lsls	r2, r3, #16
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	611a      	str	r2, [r3, #16]
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr
	...

08001a98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e12b      	b.n	8001d02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d106      	bne.n	8001ac4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff fbf2 	bl	80012a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2224      	movs	r2, #36	; 0x24
 8001ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0201 	bic.w	r2, r2, #1
 8001ada:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001aea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001afa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001afc:	f001 f842 	bl	8002b84 <HAL_RCC_GetPCLK1Freq>
 8001b00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	4a81      	ldr	r2, [pc, #516]	; (8001d0c <HAL_I2C_Init+0x274>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d807      	bhi.n	8001b1c <HAL_I2C_Init+0x84>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4a80      	ldr	r2, [pc, #512]	; (8001d10 <HAL_I2C_Init+0x278>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	bf94      	ite	ls
 8001b14:	2301      	movls	r3, #1
 8001b16:	2300      	movhi	r3, #0
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	e006      	b.n	8001b2a <HAL_I2C_Init+0x92>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4a7d      	ldr	r2, [pc, #500]	; (8001d14 <HAL_I2C_Init+0x27c>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	bf94      	ite	ls
 8001b24:	2301      	movls	r3, #1
 8001b26:	2300      	movhi	r3, #0
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e0e7      	b.n	8001d02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	4a78      	ldr	r2, [pc, #480]	; (8001d18 <HAL_I2C_Init+0x280>)
 8001b36:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3a:	0c9b      	lsrs	r3, r3, #18
 8001b3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	68ba      	ldr	r2, [r7, #8]
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	4a6a      	ldr	r2, [pc, #424]	; (8001d0c <HAL_I2C_Init+0x274>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d802      	bhi.n	8001b6c <HAL_I2C_Init+0xd4>
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	e009      	b.n	8001b80 <HAL_I2C_Init+0xe8>
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b72:	fb02 f303 	mul.w	r3, r2, r3
 8001b76:	4a69      	ldr	r2, [pc, #420]	; (8001d1c <HAL_I2C_Init+0x284>)
 8001b78:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7c:	099b      	lsrs	r3, r3, #6
 8001b7e:	3301      	adds	r3, #1
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	430b      	orrs	r3, r1
 8001b86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	495c      	ldr	r1, [pc, #368]	; (8001d0c <HAL_I2C_Init+0x274>)
 8001b9c:	428b      	cmp	r3, r1
 8001b9e:	d819      	bhi.n	8001bd4 <HAL_I2C_Init+0x13c>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	1e59      	subs	r1, r3, #1
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bae:	1c59      	adds	r1, r3, #1
 8001bb0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001bb4:	400b      	ands	r3, r1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00a      	beq.n	8001bd0 <HAL_I2C_Init+0x138>
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	1e59      	subs	r1, r3, #1
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bc8:	3301      	adds	r3, #1
 8001bca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bce:	e051      	b.n	8001c74 <HAL_I2C_Init+0x1dc>
 8001bd0:	2304      	movs	r3, #4
 8001bd2:	e04f      	b.n	8001c74 <HAL_I2C_Init+0x1dc>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d111      	bne.n	8001c00 <HAL_I2C_Init+0x168>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	1e58      	subs	r0, r3, #1
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6859      	ldr	r1, [r3, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	440b      	add	r3, r1
 8001bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bee:	3301      	adds	r3, #1
 8001bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	bf0c      	ite	eq
 8001bf8:	2301      	moveq	r3, #1
 8001bfa:	2300      	movne	r3, #0
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	e012      	b.n	8001c26 <HAL_I2C_Init+0x18e>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	1e58      	subs	r0, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6859      	ldr	r1, [r3, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	0099      	lsls	r1, r3, #2
 8001c10:	440b      	add	r3, r1
 8001c12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c16:	3301      	adds	r3, #1
 8001c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	bf0c      	ite	eq
 8001c20:	2301      	moveq	r3, #1
 8001c22:	2300      	movne	r3, #0
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_I2C_Init+0x196>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e022      	b.n	8001c74 <HAL_I2C_Init+0x1dc>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10e      	bne.n	8001c54 <HAL_I2C_Init+0x1bc>
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	1e58      	subs	r0, r3, #1
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6859      	ldr	r1, [r3, #4]
 8001c3e:	460b      	mov	r3, r1
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	440b      	add	r3, r1
 8001c44:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c48:	3301      	adds	r3, #1
 8001c4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c52:	e00f      	b.n	8001c74 <HAL_I2C_Init+0x1dc>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	1e58      	subs	r0, r3, #1
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6859      	ldr	r1, [r3, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	440b      	add	r3, r1
 8001c62:	0099      	lsls	r1, r3, #2
 8001c64:	440b      	add	r3, r1
 8001c66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c74:	6879      	ldr	r1, [r7, #4]
 8001c76:	6809      	ldr	r1, [r1, #0]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69da      	ldr	r2, [r3, #28]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ca2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6911      	ldr	r1, [r2, #16]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	68d2      	ldr	r2, [r2, #12]
 8001cae:	4311      	orrs	r1, r2
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6812      	ldr	r2, [r2, #0]
 8001cb4:	430b      	orrs	r3, r1
 8001cb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	695a      	ldr	r2, [r3, #20]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f042 0201 	orr.w	r2, r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2220      	movs	r2, #32
 8001cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	000186a0 	.word	0x000186a0
 8001d10:	001e847f 	.word	0x001e847f
 8001d14:	003d08ff 	.word	0x003d08ff
 8001d18:	431bde83 	.word	0x431bde83
 8001d1c:	10624dd3 	.word	0x10624dd3

08001d20 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b088      	sub	sp, #32
 8001d24:	af02      	add	r7, sp, #8
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	4608      	mov	r0, r1
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4603      	mov	r3, r0
 8001d30:	817b      	strh	r3, [r7, #10]
 8001d32:	460b      	mov	r3, r1
 8001d34:	813b      	strh	r3, [r7, #8]
 8001d36:	4613      	mov	r3, r2
 8001d38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d3a:	f7ff fbe7 	bl	800150c <HAL_GetTick>
 8001d3e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b20      	cmp	r3, #32
 8001d4a:	f040 80d9 	bne.w	8001f00 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	2319      	movs	r3, #25
 8001d54:	2201      	movs	r2, #1
 8001d56:	496d      	ldr	r1, [pc, #436]	; (8001f0c <HAL_I2C_Mem_Write+0x1ec>)
 8001d58:	68f8      	ldr	r0, [r7, #12]
 8001d5a:	f000 f971 	bl	8002040 <I2C_WaitOnFlagUntilTimeout>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001d64:	2302      	movs	r3, #2
 8001d66:	e0cc      	b.n	8001f02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d101      	bne.n	8001d76 <HAL_I2C_Mem_Write+0x56>
 8001d72:	2302      	movs	r3, #2
 8001d74:	e0c5      	b.n	8001f02 <HAL_I2C_Mem_Write+0x1e2>
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d007      	beq.n	8001d9c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f042 0201 	orr.w	r2, r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001daa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2221      	movs	r2, #33	; 0x21
 8001db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2240      	movs	r2, #64	; 0x40
 8001db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6a3a      	ldr	r2, [r7, #32]
 8001dc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001dcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4a4d      	ldr	r2, [pc, #308]	; (8001f10 <HAL_I2C_Mem_Write+0x1f0>)
 8001ddc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001dde:	88f8      	ldrh	r0, [r7, #6]
 8001de0:	893a      	ldrh	r2, [r7, #8]
 8001de2:	8979      	ldrh	r1, [r7, #10]
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	4603      	mov	r3, r0
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 f890 	bl	8001f14 <I2C_RequestMemoryWrite>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d052      	beq.n	8001ea0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e081      	b.n	8001f02 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f000 fa36 	bl	8002274 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00d      	beq.n	8001e2a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	d107      	bne.n	8001e26 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e06b      	b.n	8001f02 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2e:	781a      	ldrb	r2, [r3, #0]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e44:	3b01      	subs	r3, #1
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	3b01      	subs	r3, #1
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d11b      	bne.n	8001ea0 <HAL_I2C_Mem_Write+0x180>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d017      	beq.n	8001ea0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e74:	781a      	ldrb	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1aa      	bne.n	8001dfe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f000 fa29 	bl	8002304 <I2C_WaitOnBTFFlagUntilTimeout>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00d      	beq.n	8001ed4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d107      	bne.n	8001ed0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ece:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e016      	b.n	8001f02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ee2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001efc:	2300      	movs	r3, #0
 8001efe:	e000      	b.n	8001f02 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001f00:	2302      	movs	r3, #2
  }
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	00100002 	.word	0x00100002
 8001f10:	ffff0000 	.word	0xffff0000

08001f14 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b088      	sub	sp, #32
 8001f18:	af02      	add	r7, sp, #8
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	4608      	mov	r0, r1
 8001f1e:	4611      	mov	r1, r2
 8001f20:	461a      	mov	r2, r3
 8001f22:	4603      	mov	r3, r0
 8001f24:	817b      	strh	r3, [r7, #10]
 8001f26:	460b      	mov	r3, r1
 8001f28:	813b      	strh	r3, [r7, #8]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	6a3b      	ldr	r3, [r7, #32]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f000 f878 	bl	8002040 <I2C_WaitOnFlagUntilTimeout>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00d      	beq.n	8001f72 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f64:	d103      	bne.n	8001f6e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e05f      	b.n	8002032 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f72:	897b      	ldrh	r3, [r7, #10]
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	461a      	mov	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	6a3a      	ldr	r2, [r7, #32]
 8001f86:	492d      	ldr	r1, [pc, #180]	; (800203c <I2C_RequestMemoryWrite+0x128>)
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f000 f8d3 	bl	8002134 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e04c      	b.n	8002032 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb0:	6a39      	ldr	r1, [r7, #32]
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f000 f95e 	bl	8002274 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00d      	beq.n	8001fda <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d107      	bne.n	8001fd6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fd4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e02b      	b.n	8002032 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001fda:	88fb      	ldrh	r3, [r7, #6]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d105      	bne.n	8001fec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001fe0:	893b      	ldrh	r3, [r7, #8]
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	611a      	str	r2, [r3, #16]
 8001fea:	e021      	b.n	8002030 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001fec:	893b      	ldrh	r3, [r7, #8]
 8001fee:	0a1b      	lsrs	r3, r3, #8
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ffc:	6a39      	ldr	r1, [r7, #32]
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f000 f938 	bl	8002274 <I2C_WaitOnTXEFlagUntilTimeout>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00d      	beq.n	8002026 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	2b04      	cmp	r3, #4
 8002010:	d107      	bne.n	8002022 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002020:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e005      	b.n	8002032 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002026:	893b      	ldrh	r3, [r7, #8]
 8002028:	b2da      	uxtb	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	00010002 	.word	0x00010002

08002040 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	603b      	str	r3, [r7, #0]
 800204c:	4613      	mov	r3, r2
 800204e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002050:	e048      	b.n	80020e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002058:	d044      	beq.n	80020e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800205a:	f7ff fa57 	bl	800150c <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d302      	bcc.n	8002070 <I2C_WaitOnFlagUntilTimeout+0x30>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d139      	bne.n	80020e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	0c1b      	lsrs	r3, r3, #16
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b01      	cmp	r3, #1
 8002078:	d10d      	bne.n	8002096 <I2C_WaitOnFlagUntilTimeout+0x56>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	43da      	mvns	r2, r3
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	4013      	ands	r3, r2
 8002086:	b29b      	uxth	r3, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	bf0c      	ite	eq
 800208c:	2301      	moveq	r3, #1
 800208e:	2300      	movne	r3, #0
 8002090:	b2db      	uxtb	r3, r3
 8002092:	461a      	mov	r2, r3
 8002094:	e00c      	b.n	80020b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	43da      	mvns	r2, r3
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	4013      	ands	r3, r2
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	bf0c      	ite	eq
 80020a8:	2301      	moveq	r3, #1
 80020aa:	2300      	movne	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	461a      	mov	r2, r3
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d116      	bne.n	80020e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2200      	movs	r2, #0
 80020ba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2220      	movs	r2, #32
 80020c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d0:	f043 0220 	orr.w	r2, r3, #32
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e023      	b.n	800212c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	0c1b      	lsrs	r3, r3, #16
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d10d      	bne.n	800210a <I2C_WaitOnFlagUntilTimeout+0xca>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	43da      	mvns	r2, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	4013      	ands	r3, r2
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	bf0c      	ite	eq
 8002100:	2301      	moveq	r3, #1
 8002102:	2300      	movne	r3, #0
 8002104:	b2db      	uxtb	r3, r3
 8002106:	461a      	mov	r2, r3
 8002108:	e00c      	b.n	8002124 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	43da      	mvns	r2, r3
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	4013      	ands	r3, r2
 8002116:	b29b      	uxth	r3, r3
 8002118:	2b00      	cmp	r3, #0
 800211a:	bf0c      	ite	eq
 800211c:	2301      	moveq	r3, #1
 800211e:	2300      	movne	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	461a      	mov	r2, r3
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	429a      	cmp	r2, r3
 8002128:	d093      	beq.n	8002052 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
 8002140:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002142:	e071      	b.n	8002228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800214e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002152:	d123      	bne.n	800219c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002162:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800216c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2220      	movs	r2, #32
 8002178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	f043 0204 	orr.w	r2, r3, #4
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e067      	b.n	800226c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a2:	d041      	beq.n	8002228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021a4:	f7ff f9b2 	bl	800150c <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d302      	bcc.n	80021ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d136      	bne.n	8002228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	0c1b      	lsrs	r3, r3, #16
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d10c      	bne.n	80021de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	43da      	mvns	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	4013      	ands	r3, r2
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	bf14      	ite	ne
 80021d6:	2301      	movne	r3, #1
 80021d8:	2300      	moveq	r3, #0
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	e00b      	b.n	80021f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	43da      	mvns	r2, r3
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	4013      	ands	r3, r2
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	bf14      	ite	ne
 80021f0:	2301      	movne	r3, #1
 80021f2:	2300      	moveq	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d016      	beq.n	8002228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2220      	movs	r2, #32
 8002204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002214:	f043 0220 	orr.w	r2, r3, #32
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e021      	b.n	800226c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	0c1b      	lsrs	r3, r3, #16
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b01      	cmp	r3, #1
 8002230:	d10c      	bne.n	800224c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	43da      	mvns	r2, r3
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	4013      	ands	r3, r2
 800223e:	b29b      	uxth	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	bf14      	ite	ne
 8002244:	2301      	movne	r3, #1
 8002246:	2300      	moveq	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	e00b      	b.n	8002264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	43da      	mvns	r2, r3
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	4013      	ands	r3, r2
 8002258:	b29b      	uxth	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	bf14      	ite	ne
 800225e:	2301      	movne	r3, #1
 8002260:	2300      	moveq	r3, #0
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b00      	cmp	r3, #0
 8002266:	f47f af6d 	bne.w	8002144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002280:	e034      	b.n	80022ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f000 f886 	bl	8002394 <I2C_IsAcknowledgeFailed>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e034      	b.n	80022fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002298:	d028      	beq.n	80022ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800229a:	f7ff f937 	bl	800150c <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	68ba      	ldr	r2, [r7, #8]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d302      	bcc.n	80022b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d11d      	bne.n	80022ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ba:	2b80      	cmp	r3, #128	; 0x80
 80022bc:	d016      	beq.n	80022ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2220      	movs	r2, #32
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	f043 0220 	orr.w	r2, r3, #32
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e007      	b.n	80022fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f6:	2b80      	cmp	r3, #128	; 0x80
 80022f8:	d1c3      	bne.n	8002282 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002310:	e034      	b.n	800237c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 f83e 	bl	8002394 <I2C_IsAcknowledgeFailed>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e034      	b.n	800238c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002328:	d028      	beq.n	800237c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800232a:	f7ff f8ef 	bl	800150c <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	429a      	cmp	r2, r3
 8002338:	d302      	bcc.n	8002340 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d11d      	bne.n	800237c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	2b04      	cmp	r3, #4
 800234c:	d016      	beq.n	800237c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2220      	movs	r2, #32
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	f043 0220 	orr.w	r2, r3, #32
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e007      	b.n	800238c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	f003 0304 	and.w	r3, r3, #4
 8002386:	2b04      	cmp	r3, #4
 8002388:	d1c3      	bne.n	8002312 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023aa:	d11b      	bne.n	80023e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2220      	movs	r2, #32
 80023c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d0:	f043 0204 	orr.w	r2, r3, #4
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e000      	b.n	80023e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr

080023f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e272      	b.n	80028e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 8087 	beq.w	800251e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002410:	4b92      	ldr	r3, [pc, #584]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 030c 	and.w	r3, r3, #12
 8002418:	2b04      	cmp	r3, #4
 800241a:	d00c      	beq.n	8002436 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800241c:	4b8f      	ldr	r3, [pc, #572]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 030c 	and.w	r3, r3, #12
 8002424:	2b08      	cmp	r3, #8
 8002426:	d112      	bne.n	800244e <HAL_RCC_OscConfig+0x5e>
 8002428:	4b8c      	ldr	r3, [pc, #560]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002434:	d10b      	bne.n	800244e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002436:	4b89      	ldr	r3, [pc, #548]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d06c      	beq.n	800251c <HAL_RCC_OscConfig+0x12c>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d168      	bne.n	800251c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e24c      	b.n	80028e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002456:	d106      	bne.n	8002466 <HAL_RCC_OscConfig+0x76>
 8002458:	4b80      	ldr	r3, [pc, #512]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a7f      	ldr	r2, [pc, #508]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 800245e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	e02e      	b.n	80024c4 <HAL_RCC_OscConfig+0xd4>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10c      	bne.n	8002488 <HAL_RCC_OscConfig+0x98>
 800246e:	4b7b      	ldr	r3, [pc, #492]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a7a      	ldr	r2, [pc, #488]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 8002474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	4b78      	ldr	r3, [pc, #480]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a77      	ldr	r2, [pc, #476]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 8002480:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	e01d      	b.n	80024c4 <HAL_RCC_OscConfig+0xd4>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002490:	d10c      	bne.n	80024ac <HAL_RCC_OscConfig+0xbc>
 8002492:	4b72      	ldr	r3, [pc, #456]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a71      	ldr	r2, [pc, #452]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 8002498:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	4b6f      	ldr	r3, [pc, #444]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a6e      	ldr	r2, [pc, #440]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 80024a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	e00b      	b.n	80024c4 <HAL_RCC_OscConfig+0xd4>
 80024ac:	4b6b      	ldr	r3, [pc, #428]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a6a      	ldr	r2, [pc, #424]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 80024b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024b6:	6013      	str	r3, [r2, #0]
 80024b8:	4b68      	ldr	r3, [pc, #416]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a67      	ldr	r2, [pc, #412]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 80024be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d013      	beq.n	80024f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024cc:	f7ff f81e 	bl	800150c <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d4:	f7ff f81a 	bl	800150c <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b64      	cmp	r3, #100	; 0x64
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e200      	b.n	80028e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e6:	4b5d      	ldr	r3, [pc, #372]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0f0      	beq.n	80024d4 <HAL_RCC_OscConfig+0xe4>
 80024f2:	e014      	b.n	800251e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f4:	f7ff f80a 	bl	800150c <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024fc:	f7ff f806 	bl	800150c <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b64      	cmp	r3, #100	; 0x64
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e1ec      	b.n	80028e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250e:	4b53      	ldr	r3, [pc, #332]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f0      	bne.n	80024fc <HAL_RCC_OscConfig+0x10c>
 800251a:	e000      	b.n	800251e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800251c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d063      	beq.n	80025f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800252a:	4b4c      	ldr	r3, [pc, #304]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00b      	beq.n	800254e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002536:	4b49      	ldr	r3, [pc, #292]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	2b08      	cmp	r3, #8
 8002540:	d11c      	bne.n	800257c <HAL_RCC_OscConfig+0x18c>
 8002542:	4b46      	ldr	r3, [pc, #280]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d116      	bne.n	800257c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254e:	4b43      	ldr	r3, [pc, #268]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d005      	beq.n	8002566 <HAL_RCC_OscConfig+0x176>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d001      	beq.n	8002566 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e1c0      	b.n	80028e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002566:	4b3d      	ldr	r3, [pc, #244]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	4939      	ldr	r1, [pc, #228]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 8002576:	4313      	orrs	r3, r2
 8002578:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800257a:	e03a      	b.n	80025f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d020      	beq.n	80025c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002584:	4b36      	ldr	r3, [pc, #216]	; (8002660 <HAL_RCC_OscConfig+0x270>)
 8002586:	2201      	movs	r2, #1
 8002588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258a:	f7fe ffbf 	bl	800150c <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002592:	f7fe ffbb 	bl	800150c <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e1a1      	b.n	80028e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a4:	4b2d      	ldr	r3, [pc, #180]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f0      	beq.n	8002592 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b0:	4b2a      	ldr	r3, [pc, #168]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4927      	ldr	r1, [pc, #156]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	600b      	str	r3, [r1, #0]
 80025c4:	e015      	b.n	80025f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025c6:	4b26      	ldr	r3, [pc, #152]	; (8002660 <HAL_RCC_OscConfig+0x270>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025cc:	f7fe ff9e 	bl	800150c <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d4:	f7fe ff9a 	bl	800150c <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e180      	b.n	80028e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e6:	4b1d      	ldr	r3, [pc, #116]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f0      	bne.n	80025d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d03a      	beq.n	8002674 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d019      	beq.n	800263a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002606:	4b17      	ldr	r3, [pc, #92]	; (8002664 <HAL_RCC_OscConfig+0x274>)
 8002608:	2201      	movs	r2, #1
 800260a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800260c:	f7fe ff7e 	bl	800150c <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002614:	f7fe ff7a 	bl	800150c <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e160      	b.n	80028e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002626:	4b0d      	ldr	r3, [pc, #52]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002632:	2001      	movs	r0, #1
 8002634:	f000 faba 	bl	8002bac <RCC_Delay>
 8002638:	e01c      	b.n	8002674 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800263a:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <HAL_RCC_OscConfig+0x274>)
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002640:	f7fe ff64 	bl	800150c <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002646:	e00f      	b.n	8002668 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002648:	f7fe ff60 	bl	800150c <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d908      	bls.n	8002668 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e146      	b.n	80028e8 <HAL_RCC_OscConfig+0x4f8>
 800265a:	bf00      	nop
 800265c:	40021000 	.word	0x40021000
 8002660:	42420000 	.word	0x42420000
 8002664:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002668:	4b92      	ldr	r3, [pc, #584]	; (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1e9      	bne.n	8002648 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 80a6 	beq.w	80027ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002682:	2300      	movs	r3, #0
 8002684:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002686:	4b8b      	ldr	r3, [pc, #556]	; (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10d      	bne.n	80026ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002692:	4b88      	ldr	r3, [pc, #544]	; (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	4a87      	ldr	r2, [pc, #540]	; (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 8002698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800269c:	61d3      	str	r3, [r2, #28]
 800269e:	4b85      	ldr	r3, [pc, #532]	; (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a6:	60bb      	str	r3, [r7, #8]
 80026a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026aa:	2301      	movs	r3, #1
 80026ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ae:	4b82      	ldr	r3, [pc, #520]	; (80028b8 <HAL_RCC_OscConfig+0x4c8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d118      	bne.n	80026ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ba:	4b7f      	ldr	r3, [pc, #508]	; (80028b8 <HAL_RCC_OscConfig+0x4c8>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a7e      	ldr	r2, [pc, #504]	; (80028b8 <HAL_RCC_OscConfig+0x4c8>)
 80026c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026c6:	f7fe ff21 	bl	800150c <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ce:	f7fe ff1d 	bl	800150c <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b64      	cmp	r3, #100	; 0x64
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e103      	b.n	80028e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e0:	4b75      	ldr	r3, [pc, #468]	; (80028b8 <HAL_RCC_OscConfig+0x4c8>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d106      	bne.n	8002702 <HAL_RCC_OscConfig+0x312>
 80026f4:	4b6f      	ldr	r3, [pc, #444]	; (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	4a6e      	ldr	r2, [pc, #440]	; (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	6213      	str	r3, [r2, #32]
 8002700:	e02d      	b.n	800275e <HAL_RCC_OscConfig+0x36e>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10c      	bne.n	8002724 <HAL_RCC_OscConfig+0x334>
 800270a:	4b6a      	ldr	r3, [pc, #424]	; (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	4a69      	ldr	r2, [pc, #420]	; (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 8002710:	f023 0301 	bic.w	r3, r3, #1
 8002714:	6213      	str	r3, [r2, #32]
 8002716:	4b67      	ldr	r3, [pc, #412]	; (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	4a66      	ldr	r2, [pc, #408]	; (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 800271c:	f023 0304 	bic.w	r3, r3, #4
 8002720:	6213      	str	r3, [r2, #32]
 8002722:	e01c      	b.n	800275e <HAL_RCC_OscConfig+0x36e>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	2b05      	cmp	r3, #5
 800272a:	d10c      	bne.n	8002746 <HAL_RCC_OscConfig+0x356>
 800272c:	4b61      	ldr	r3, [pc, #388]	; (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	4a60      	ldr	r2, [pc, #384]	; (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 8002732:	f043 0304 	orr.w	r3, r3, #4
 8002736:	6213      	str	r3, [r2, #32]
 8002738:	4b5e      	ldr	r3, [pc, #376]	; (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	4a5d      	ldr	r2, [pc, #372]	; (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	6213      	str	r3, [r2, #32]
 8002744:	e00b      	b.n	800275e <HAL_RCC_OscConfig+0x36e>
 8002746:	4b5b      	ldr	r3, [pc, #364]	; (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	4a5a      	ldr	r2, [pc, #360]	; (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 800274c:	f023 0301 	bic.w	r3, r3, #1
 8002750:	6213      	str	r3, [r2, #32]
 8002752:	4b58      	ldr	r3, [pc, #352]	; (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	4a57      	ldr	r2, [pc, #348]	; (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 8002758:	f023 0304 	bic.w	r3, r3, #4
 800275c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d015      	beq.n	8002792 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002766:	f7fe fed1 	bl	800150c <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276c:	e00a      	b.n	8002784 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276e:	f7fe fecd 	bl	800150c <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	f241 3288 	movw	r2, #5000	; 0x1388
 800277c:	4293      	cmp	r3, r2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e0b1      	b.n	80028e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002784:	4b4b      	ldr	r3, [pc, #300]	; (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0ee      	beq.n	800276e <HAL_RCC_OscConfig+0x37e>
 8002790:	e014      	b.n	80027bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002792:	f7fe febb 	bl	800150c <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002798:	e00a      	b.n	80027b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800279a:	f7fe feb7 	bl	800150c <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e09b      	b.n	80028e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b0:	4b40      	ldr	r3, [pc, #256]	; (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1ee      	bne.n	800279a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027bc:	7dfb      	ldrb	r3, [r7, #23]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d105      	bne.n	80027ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c2:	4b3c      	ldr	r3, [pc, #240]	; (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	4a3b      	ldr	r2, [pc, #236]	; (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 80027c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 8087 	beq.w	80028e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027d8:	4b36      	ldr	r3, [pc, #216]	; (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 030c 	and.w	r3, r3, #12
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d061      	beq.n	80028a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	69db      	ldr	r3, [r3, #28]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d146      	bne.n	800287a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ec:	4b33      	ldr	r3, [pc, #204]	; (80028bc <HAL_RCC_OscConfig+0x4cc>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f2:	f7fe fe8b 	bl	800150c <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027fa:	f7fe fe87 	bl	800150c <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e06d      	b.n	80028e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800280c:	4b29      	ldr	r3, [pc, #164]	; (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1f0      	bne.n	80027fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002820:	d108      	bne.n	8002834 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002822:	4b24      	ldr	r3, [pc, #144]	; (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	4921      	ldr	r1, [pc, #132]	; (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 8002830:	4313      	orrs	r3, r2
 8002832:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002834:	4b1f      	ldr	r3, [pc, #124]	; (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a19      	ldr	r1, [r3, #32]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	430b      	orrs	r3, r1
 8002846:	491b      	ldr	r1, [pc, #108]	; (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 8002848:	4313      	orrs	r3, r2
 800284a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800284c:	4b1b      	ldr	r3, [pc, #108]	; (80028bc <HAL_RCC_OscConfig+0x4cc>)
 800284e:	2201      	movs	r2, #1
 8002850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002852:	f7fe fe5b 	bl	800150c <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800285a:	f7fe fe57 	bl	800150c <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e03d      	b.n	80028e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800286c:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0f0      	beq.n	800285a <HAL_RCC_OscConfig+0x46a>
 8002878:	e035      	b.n	80028e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287a:	4b10      	ldr	r3, [pc, #64]	; (80028bc <HAL_RCC_OscConfig+0x4cc>)
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002880:	f7fe fe44 	bl	800150c <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002888:	f7fe fe40 	bl	800150c <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e026      	b.n	80028e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800289a:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f0      	bne.n	8002888 <HAL_RCC_OscConfig+0x498>
 80028a6:	e01e      	b.n	80028e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69db      	ldr	r3, [r3, #28]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d107      	bne.n	80028c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e019      	b.n	80028e8 <HAL_RCC_OscConfig+0x4f8>
 80028b4:	40021000 	.word	0x40021000
 80028b8:	40007000 	.word	0x40007000
 80028bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <HAL_RCC_OscConfig+0x500>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d106      	bne.n	80028e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028de:	429a      	cmp	r2, r3
 80028e0:	d001      	beq.n	80028e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40021000 	.word	0x40021000

080028f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e0d0      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002908:	4b6a      	ldr	r3, [pc, #424]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d910      	bls.n	8002938 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002916:	4b67      	ldr	r3, [pc, #412]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f023 0207 	bic.w	r2, r3, #7
 800291e:	4965      	ldr	r1, [pc, #404]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	4313      	orrs	r3, r2
 8002924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002926:	4b63      	ldr	r3, [pc, #396]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d001      	beq.n	8002938 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e0b8      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d020      	beq.n	8002986 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002950:	4b59      	ldr	r3, [pc, #356]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	4a58      	ldr	r2, [pc, #352]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002956:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800295a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0308 	and.w	r3, r3, #8
 8002964:	2b00      	cmp	r3, #0
 8002966:	d005      	beq.n	8002974 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002968:	4b53      	ldr	r3, [pc, #332]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	4a52      	ldr	r2, [pc, #328]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 800296e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002972:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002974:	4b50      	ldr	r3, [pc, #320]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	494d      	ldr	r1, [pc, #308]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002982:	4313      	orrs	r3, r2
 8002984:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d040      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d107      	bne.n	80029aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299a:	4b47      	ldr	r3, [pc, #284]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d115      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e07f      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d107      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b2:	4b41      	ldr	r3, [pc, #260]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d109      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e073      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c2:	4b3d      	ldr	r3, [pc, #244]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e06b      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029d2:	4b39      	ldr	r3, [pc, #228]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f023 0203 	bic.w	r2, r3, #3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	4936      	ldr	r1, [pc, #216]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029e4:	f7fe fd92 	bl	800150c <HAL_GetTick>
 80029e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ea:	e00a      	b.n	8002a02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ec:	f7fe fd8e 	bl	800150c <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e053      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a02:	4b2d      	ldr	r3, [pc, #180]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f003 020c 	and.w	r2, r3, #12
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d1eb      	bne.n	80029ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a14:	4b27      	ldr	r3, [pc, #156]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d210      	bcs.n	8002a44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a22:	4b24      	ldr	r3, [pc, #144]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f023 0207 	bic.w	r2, r3, #7
 8002a2a:	4922      	ldr	r1, [pc, #136]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a32:	4b20      	ldr	r3, [pc, #128]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d001      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e032      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d008      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a50:	4b19      	ldr	r3, [pc, #100]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	4916      	ldr	r1, [pc, #88]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d009      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a6e:	4b12      	ldr	r3, [pc, #72]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	490e      	ldr	r1, [pc, #56]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a82:	f000 f821 	bl	8002ac8 <HAL_RCC_GetSysClockFreq>
 8002a86:	4602      	mov	r2, r0
 8002a88:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	091b      	lsrs	r3, r3, #4
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	490a      	ldr	r1, [pc, #40]	; (8002abc <HAL_RCC_ClockConfig+0x1c8>)
 8002a94:	5ccb      	ldrb	r3, [r1, r3]
 8002a96:	fa22 f303 	lsr.w	r3, r2, r3
 8002a9a:	4a09      	ldr	r2, [pc, #36]	; (8002ac0 <HAL_RCC_ClockConfig+0x1cc>)
 8002a9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a9e:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <HAL_RCC_ClockConfig+0x1d0>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7fe fcf0 	bl	8001488 <HAL_InitTick>

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40022000 	.word	0x40022000
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	08003638 	.word	0x08003638
 8002ac0:	20000000 	.word	0x20000000
 8002ac4:	20000004 	.word	0x20000004

08002ac8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b087      	sub	sp, #28
 8002acc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	617b      	str	r3, [r7, #20]
 8002ada:	2300      	movs	r3, #0
 8002adc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ae2:	4b1e      	ldr	r3, [pc, #120]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x94>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f003 030c 	and.w	r3, r3, #12
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d002      	beq.n	8002af8 <HAL_RCC_GetSysClockFreq+0x30>
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d003      	beq.n	8002afe <HAL_RCC_GetSysClockFreq+0x36>
 8002af6:	e027      	b.n	8002b48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002af8:	4b19      	ldr	r3, [pc, #100]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x98>)
 8002afa:	613b      	str	r3, [r7, #16]
      break;
 8002afc:	e027      	b.n	8002b4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	0c9b      	lsrs	r3, r3, #18
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	4a17      	ldr	r2, [pc, #92]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b08:	5cd3      	ldrb	r3, [r2, r3]
 8002b0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d010      	beq.n	8002b38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b16:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x94>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	0c5b      	lsrs	r3, r3, #17
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	4a11      	ldr	r2, [pc, #68]	; (8002b68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b22:	5cd3      	ldrb	r3, [r2, r3]
 8002b24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a0d      	ldr	r2, [pc, #52]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b2a:	fb03 f202 	mul.w	r2, r3, r2
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b34:	617b      	str	r3, [r7, #20]
 8002b36:	e004      	b.n	8002b42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a0c      	ldr	r2, [pc, #48]	; (8002b6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b3c:	fb02 f303 	mul.w	r3, r2, r3
 8002b40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	613b      	str	r3, [r7, #16]
      break;
 8002b46:	e002      	b.n	8002b4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b48:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b4a:	613b      	str	r3, [r7, #16]
      break;
 8002b4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b4e:	693b      	ldr	r3, [r7, #16]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	371c      	adds	r7, #28
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	007a1200 	.word	0x007a1200
 8002b64:	08003650 	.word	0x08003650
 8002b68:	08003660 	.word	0x08003660
 8002b6c:	003d0900 	.word	0x003d0900

08002b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b74:	4b02      	ldr	r3, [pc, #8]	; (8002b80 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b76:	681b      	ldr	r3, [r3, #0]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr
 8002b80:	20000000 	.word	0x20000000

08002b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b88:	f7ff fff2 	bl	8002b70 <HAL_RCC_GetHCLKFreq>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	0a1b      	lsrs	r3, r3, #8
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	4903      	ldr	r1, [pc, #12]	; (8002ba8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b9a:	5ccb      	ldrb	r3, [r1, r3]
 8002b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	08003648 	.word	0x08003648

08002bac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bb4:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <RCC_Delay+0x34>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a0a      	ldr	r2, [pc, #40]	; (8002be4 <RCC_Delay+0x38>)
 8002bba:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbe:	0a5b      	lsrs	r3, r3, #9
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	fb02 f303 	mul.w	r3, r2, r3
 8002bc6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bc8:	bf00      	nop
  }
  while (Delay --);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1e5a      	subs	r2, r3, #1
 8002bce:	60fa      	str	r2, [r7, #12]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1f9      	bne.n	8002bc8 <RCC_Delay+0x1c>
}
 8002bd4:	bf00      	nop
 8002bd6:	bf00      	nop
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr
 8002be0:	20000000 	.word	0x20000000
 8002be4:	10624dd3 	.word	0x10624dd3

08002be8 <siprintf>:
 8002be8:	b40e      	push	{r1, r2, r3}
 8002bea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002bee:	b500      	push	{lr}
 8002bf0:	b09c      	sub	sp, #112	; 0x70
 8002bf2:	ab1d      	add	r3, sp, #116	; 0x74
 8002bf4:	9002      	str	r0, [sp, #8]
 8002bf6:	9006      	str	r0, [sp, #24]
 8002bf8:	9107      	str	r1, [sp, #28]
 8002bfa:	9104      	str	r1, [sp, #16]
 8002bfc:	4808      	ldr	r0, [pc, #32]	; (8002c20 <siprintf+0x38>)
 8002bfe:	4909      	ldr	r1, [pc, #36]	; (8002c24 <siprintf+0x3c>)
 8002c00:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c04:	9105      	str	r1, [sp, #20]
 8002c06:	6800      	ldr	r0, [r0, #0]
 8002c08:	a902      	add	r1, sp, #8
 8002c0a:	9301      	str	r3, [sp, #4]
 8002c0c:	f000 f98e 	bl	8002f2c <_svfiprintf_r>
 8002c10:	2200      	movs	r2, #0
 8002c12:	9b02      	ldr	r3, [sp, #8]
 8002c14:	701a      	strb	r2, [r3, #0]
 8002c16:	b01c      	add	sp, #112	; 0x70
 8002c18:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c1c:	b003      	add	sp, #12
 8002c1e:	4770      	bx	lr
 8002c20:	20000058 	.word	0x20000058
 8002c24:	ffff0208 	.word	0xffff0208

08002c28 <memset>:
 8002c28:	4603      	mov	r3, r0
 8002c2a:	4402      	add	r2, r0
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d100      	bne.n	8002c32 <memset+0xa>
 8002c30:	4770      	bx	lr
 8002c32:	f803 1b01 	strb.w	r1, [r3], #1
 8002c36:	e7f9      	b.n	8002c2c <memset+0x4>

08002c38 <__errno>:
 8002c38:	4b01      	ldr	r3, [pc, #4]	; (8002c40 <__errno+0x8>)
 8002c3a:	6818      	ldr	r0, [r3, #0]
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	20000058 	.word	0x20000058

08002c44 <__libc_init_array>:
 8002c44:	b570      	push	{r4, r5, r6, lr}
 8002c46:	2600      	movs	r6, #0
 8002c48:	4d0c      	ldr	r5, [pc, #48]	; (8002c7c <__libc_init_array+0x38>)
 8002c4a:	4c0d      	ldr	r4, [pc, #52]	; (8002c80 <__libc_init_array+0x3c>)
 8002c4c:	1b64      	subs	r4, r4, r5
 8002c4e:	10a4      	asrs	r4, r4, #2
 8002c50:	42a6      	cmp	r6, r4
 8002c52:	d109      	bne.n	8002c68 <__libc_init_array+0x24>
 8002c54:	f000 fc7a 	bl	800354c <_init>
 8002c58:	2600      	movs	r6, #0
 8002c5a:	4d0a      	ldr	r5, [pc, #40]	; (8002c84 <__libc_init_array+0x40>)
 8002c5c:	4c0a      	ldr	r4, [pc, #40]	; (8002c88 <__libc_init_array+0x44>)
 8002c5e:	1b64      	subs	r4, r4, r5
 8002c60:	10a4      	asrs	r4, r4, #2
 8002c62:	42a6      	cmp	r6, r4
 8002c64:	d105      	bne.n	8002c72 <__libc_init_array+0x2e>
 8002c66:	bd70      	pop	{r4, r5, r6, pc}
 8002c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c6c:	4798      	blx	r3
 8002c6e:	3601      	adds	r6, #1
 8002c70:	e7ee      	b.n	8002c50 <__libc_init_array+0xc>
 8002c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c76:	4798      	blx	r3
 8002c78:	3601      	adds	r6, #1
 8002c7a:	e7f2      	b.n	8002c62 <__libc_init_array+0x1e>
 8002c7c:	08003698 	.word	0x08003698
 8002c80:	08003698 	.word	0x08003698
 8002c84:	08003698 	.word	0x08003698
 8002c88:	0800369c 	.word	0x0800369c

08002c8c <__retarget_lock_acquire_recursive>:
 8002c8c:	4770      	bx	lr

08002c8e <__retarget_lock_release_recursive>:
 8002c8e:	4770      	bx	lr

08002c90 <_free_r>:
 8002c90:	b538      	push	{r3, r4, r5, lr}
 8002c92:	4605      	mov	r5, r0
 8002c94:	2900      	cmp	r1, #0
 8002c96:	d040      	beq.n	8002d1a <_free_r+0x8a>
 8002c98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c9c:	1f0c      	subs	r4, r1, #4
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	bfb8      	it	lt
 8002ca2:	18e4      	addlt	r4, r4, r3
 8002ca4:	f000 f8dc 	bl	8002e60 <__malloc_lock>
 8002ca8:	4a1c      	ldr	r2, [pc, #112]	; (8002d1c <_free_r+0x8c>)
 8002caa:	6813      	ldr	r3, [r2, #0]
 8002cac:	b933      	cbnz	r3, 8002cbc <_free_r+0x2c>
 8002cae:	6063      	str	r3, [r4, #4]
 8002cb0:	6014      	str	r4, [r2, #0]
 8002cb2:	4628      	mov	r0, r5
 8002cb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002cb8:	f000 b8d8 	b.w	8002e6c <__malloc_unlock>
 8002cbc:	42a3      	cmp	r3, r4
 8002cbe:	d908      	bls.n	8002cd2 <_free_r+0x42>
 8002cc0:	6820      	ldr	r0, [r4, #0]
 8002cc2:	1821      	adds	r1, r4, r0
 8002cc4:	428b      	cmp	r3, r1
 8002cc6:	bf01      	itttt	eq
 8002cc8:	6819      	ldreq	r1, [r3, #0]
 8002cca:	685b      	ldreq	r3, [r3, #4]
 8002ccc:	1809      	addeq	r1, r1, r0
 8002cce:	6021      	streq	r1, [r4, #0]
 8002cd0:	e7ed      	b.n	8002cae <_free_r+0x1e>
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	b10b      	cbz	r3, 8002cdc <_free_r+0x4c>
 8002cd8:	42a3      	cmp	r3, r4
 8002cda:	d9fa      	bls.n	8002cd2 <_free_r+0x42>
 8002cdc:	6811      	ldr	r1, [r2, #0]
 8002cde:	1850      	adds	r0, r2, r1
 8002ce0:	42a0      	cmp	r0, r4
 8002ce2:	d10b      	bne.n	8002cfc <_free_r+0x6c>
 8002ce4:	6820      	ldr	r0, [r4, #0]
 8002ce6:	4401      	add	r1, r0
 8002ce8:	1850      	adds	r0, r2, r1
 8002cea:	4283      	cmp	r3, r0
 8002cec:	6011      	str	r1, [r2, #0]
 8002cee:	d1e0      	bne.n	8002cb2 <_free_r+0x22>
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	4408      	add	r0, r1
 8002cf6:	6010      	str	r0, [r2, #0]
 8002cf8:	6053      	str	r3, [r2, #4]
 8002cfa:	e7da      	b.n	8002cb2 <_free_r+0x22>
 8002cfc:	d902      	bls.n	8002d04 <_free_r+0x74>
 8002cfe:	230c      	movs	r3, #12
 8002d00:	602b      	str	r3, [r5, #0]
 8002d02:	e7d6      	b.n	8002cb2 <_free_r+0x22>
 8002d04:	6820      	ldr	r0, [r4, #0]
 8002d06:	1821      	adds	r1, r4, r0
 8002d08:	428b      	cmp	r3, r1
 8002d0a:	bf01      	itttt	eq
 8002d0c:	6819      	ldreq	r1, [r3, #0]
 8002d0e:	685b      	ldreq	r3, [r3, #4]
 8002d10:	1809      	addeq	r1, r1, r0
 8002d12:	6021      	streq	r1, [r4, #0]
 8002d14:	6063      	str	r3, [r4, #4]
 8002d16:	6054      	str	r4, [r2, #4]
 8002d18:	e7cb      	b.n	8002cb2 <_free_r+0x22>
 8002d1a:	bd38      	pop	{r3, r4, r5, pc}
 8002d1c:	20000254 	.word	0x20000254

08002d20 <sbrk_aligned>:
 8002d20:	b570      	push	{r4, r5, r6, lr}
 8002d22:	4e0e      	ldr	r6, [pc, #56]	; (8002d5c <sbrk_aligned+0x3c>)
 8002d24:	460c      	mov	r4, r1
 8002d26:	6831      	ldr	r1, [r6, #0]
 8002d28:	4605      	mov	r5, r0
 8002d2a:	b911      	cbnz	r1, 8002d32 <sbrk_aligned+0x12>
 8002d2c:	f000 fbaa 	bl	8003484 <_sbrk_r>
 8002d30:	6030      	str	r0, [r6, #0]
 8002d32:	4621      	mov	r1, r4
 8002d34:	4628      	mov	r0, r5
 8002d36:	f000 fba5 	bl	8003484 <_sbrk_r>
 8002d3a:	1c43      	adds	r3, r0, #1
 8002d3c:	d00a      	beq.n	8002d54 <sbrk_aligned+0x34>
 8002d3e:	1cc4      	adds	r4, r0, #3
 8002d40:	f024 0403 	bic.w	r4, r4, #3
 8002d44:	42a0      	cmp	r0, r4
 8002d46:	d007      	beq.n	8002d58 <sbrk_aligned+0x38>
 8002d48:	1a21      	subs	r1, r4, r0
 8002d4a:	4628      	mov	r0, r5
 8002d4c:	f000 fb9a 	bl	8003484 <_sbrk_r>
 8002d50:	3001      	adds	r0, #1
 8002d52:	d101      	bne.n	8002d58 <sbrk_aligned+0x38>
 8002d54:	f04f 34ff 	mov.w	r4, #4294967295
 8002d58:	4620      	mov	r0, r4
 8002d5a:	bd70      	pop	{r4, r5, r6, pc}
 8002d5c:	20000258 	.word	0x20000258

08002d60 <_malloc_r>:
 8002d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d64:	1ccd      	adds	r5, r1, #3
 8002d66:	f025 0503 	bic.w	r5, r5, #3
 8002d6a:	3508      	adds	r5, #8
 8002d6c:	2d0c      	cmp	r5, #12
 8002d6e:	bf38      	it	cc
 8002d70:	250c      	movcc	r5, #12
 8002d72:	2d00      	cmp	r5, #0
 8002d74:	4607      	mov	r7, r0
 8002d76:	db01      	blt.n	8002d7c <_malloc_r+0x1c>
 8002d78:	42a9      	cmp	r1, r5
 8002d7a:	d905      	bls.n	8002d88 <_malloc_r+0x28>
 8002d7c:	230c      	movs	r3, #12
 8002d7e:	2600      	movs	r6, #0
 8002d80:	603b      	str	r3, [r7, #0]
 8002d82:	4630      	mov	r0, r6
 8002d84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d88:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002e5c <_malloc_r+0xfc>
 8002d8c:	f000 f868 	bl	8002e60 <__malloc_lock>
 8002d90:	f8d8 3000 	ldr.w	r3, [r8]
 8002d94:	461c      	mov	r4, r3
 8002d96:	bb5c      	cbnz	r4, 8002df0 <_malloc_r+0x90>
 8002d98:	4629      	mov	r1, r5
 8002d9a:	4638      	mov	r0, r7
 8002d9c:	f7ff ffc0 	bl	8002d20 <sbrk_aligned>
 8002da0:	1c43      	adds	r3, r0, #1
 8002da2:	4604      	mov	r4, r0
 8002da4:	d155      	bne.n	8002e52 <_malloc_r+0xf2>
 8002da6:	f8d8 4000 	ldr.w	r4, [r8]
 8002daa:	4626      	mov	r6, r4
 8002dac:	2e00      	cmp	r6, #0
 8002dae:	d145      	bne.n	8002e3c <_malloc_r+0xdc>
 8002db0:	2c00      	cmp	r4, #0
 8002db2:	d048      	beq.n	8002e46 <_malloc_r+0xe6>
 8002db4:	6823      	ldr	r3, [r4, #0]
 8002db6:	4631      	mov	r1, r6
 8002db8:	4638      	mov	r0, r7
 8002dba:	eb04 0903 	add.w	r9, r4, r3
 8002dbe:	f000 fb61 	bl	8003484 <_sbrk_r>
 8002dc2:	4581      	cmp	r9, r0
 8002dc4:	d13f      	bne.n	8002e46 <_malloc_r+0xe6>
 8002dc6:	6821      	ldr	r1, [r4, #0]
 8002dc8:	4638      	mov	r0, r7
 8002dca:	1a6d      	subs	r5, r5, r1
 8002dcc:	4629      	mov	r1, r5
 8002dce:	f7ff ffa7 	bl	8002d20 <sbrk_aligned>
 8002dd2:	3001      	adds	r0, #1
 8002dd4:	d037      	beq.n	8002e46 <_malloc_r+0xe6>
 8002dd6:	6823      	ldr	r3, [r4, #0]
 8002dd8:	442b      	add	r3, r5
 8002dda:	6023      	str	r3, [r4, #0]
 8002ddc:	f8d8 3000 	ldr.w	r3, [r8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d038      	beq.n	8002e56 <_malloc_r+0xf6>
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	42a2      	cmp	r2, r4
 8002de8:	d12b      	bne.n	8002e42 <_malloc_r+0xe2>
 8002dea:	2200      	movs	r2, #0
 8002dec:	605a      	str	r2, [r3, #4]
 8002dee:	e00f      	b.n	8002e10 <_malloc_r+0xb0>
 8002df0:	6822      	ldr	r2, [r4, #0]
 8002df2:	1b52      	subs	r2, r2, r5
 8002df4:	d41f      	bmi.n	8002e36 <_malloc_r+0xd6>
 8002df6:	2a0b      	cmp	r2, #11
 8002df8:	d917      	bls.n	8002e2a <_malloc_r+0xca>
 8002dfa:	1961      	adds	r1, r4, r5
 8002dfc:	42a3      	cmp	r3, r4
 8002dfe:	6025      	str	r5, [r4, #0]
 8002e00:	bf18      	it	ne
 8002e02:	6059      	strne	r1, [r3, #4]
 8002e04:	6863      	ldr	r3, [r4, #4]
 8002e06:	bf08      	it	eq
 8002e08:	f8c8 1000 	streq.w	r1, [r8]
 8002e0c:	5162      	str	r2, [r4, r5]
 8002e0e:	604b      	str	r3, [r1, #4]
 8002e10:	4638      	mov	r0, r7
 8002e12:	f104 060b 	add.w	r6, r4, #11
 8002e16:	f000 f829 	bl	8002e6c <__malloc_unlock>
 8002e1a:	f026 0607 	bic.w	r6, r6, #7
 8002e1e:	1d23      	adds	r3, r4, #4
 8002e20:	1af2      	subs	r2, r6, r3
 8002e22:	d0ae      	beq.n	8002d82 <_malloc_r+0x22>
 8002e24:	1b9b      	subs	r3, r3, r6
 8002e26:	50a3      	str	r3, [r4, r2]
 8002e28:	e7ab      	b.n	8002d82 <_malloc_r+0x22>
 8002e2a:	42a3      	cmp	r3, r4
 8002e2c:	6862      	ldr	r2, [r4, #4]
 8002e2e:	d1dd      	bne.n	8002dec <_malloc_r+0x8c>
 8002e30:	f8c8 2000 	str.w	r2, [r8]
 8002e34:	e7ec      	b.n	8002e10 <_malloc_r+0xb0>
 8002e36:	4623      	mov	r3, r4
 8002e38:	6864      	ldr	r4, [r4, #4]
 8002e3a:	e7ac      	b.n	8002d96 <_malloc_r+0x36>
 8002e3c:	4634      	mov	r4, r6
 8002e3e:	6876      	ldr	r6, [r6, #4]
 8002e40:	e7b4      	b.n	8002dac <_malloc_r+0x4c>
 8002e42:	4613      	mov	r3, r2
 8002e44:	e7cc      	b.n	8002de0 <_malloc_r+0x80>
 8002e46:	230c      	movs	r3, #12
 8002e48:	4638      	mov	r0, r7
 8002e4a:	603b      	str	r3, [r7, #0]
 8002e4c:	f000 f80e 	bl	8002e6c <__malloc_unlock>
 8002e50:	e797      	b.n	8002d82 <_malloc_r+0x22>
 8002e52:	6025      	str	r5, [r4, #0]
 8002e54:	e7dc      	b.n	8002e10 <_malloc_r+0xb0>
 8002e56:	605b      	str	r3, [r3, #4]
 8002e58:	deff      	udf	#255	; 0xff
 8002e5a:	bf00      	nop
 8002e5c:	20000254 	.word	0x20000254

08002e60 <__malloc_lock>:
 8002e60:	4801      	ldr	r0, [pc, #4]	; (8002e68 <__malloc_lock+0x8>)
 8002e62:	f7ff bf13 	b.w	8002c8c <__retarget_lock_acquire_recursive>
 8002e66:	bf00      	nop
 8002e68:	20000250 	.word	0x20000250

08002e6c <__malloc_unlock>:
 8002e6c:	4801      	ldr	r0, [pc, #4]	; (8002e74 <__malloc_unlock+0x8>)
 8002e6e:	f7ff bf0e 	b.w	8002c8e <__retarget_lock_release_recursive>
 8002e72:	bf00      	nop
 8002e74:	20000250 	.word	0x20000250

08002e78 <__ssputs_r>:
 8002e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e7c:	461f      	mov	r7, r3
 8002e7e:	688e      	ldr	r6, [r1, #8]
 8002e80:	4682      	mov	sl, r0
 8002e82:	42be      	cmp	r6, r7
 8002e84:	460c      	mov	r4, r1
 8002e86:	4690      	mov	r8, r2
 8002e88:	680b      	ldr	r3, [r1, #0]
 8002e8a:	d82c      	bhi.n	8002ee6 <__ssputs_r+0x6e>
 8002e8c:	898a      	ldrh	r2, [r1, #12]
 8002e8e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002e92:	d026      	beq.n	8002ee2 <__ssputs_r+0x6a>
 8002e94:	6965      	ldr	r5, [r4, #20]
 8002e96:	6909      	ldr	r1, [r1, #16]
 8002e98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e9c:	eba3 0901 	sub.w	r9, r3, r1
 8002ea0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002ea4:	1c7b      	adds	r3, r7, #1
 8002ea6:	444b      	add	r3, r9
 8002ea8:	106d      	asrs	r5, r5, #1
 8002eaa:	429d      	cmp	r5, r3
 8002eac:	bf38      	it	cc
 8002eae:	461d      	movcc	r5, r3
 8002eb0:	0553      	lsls	r3, r2, #21
 8002eb2:	d527      	bpl.n	8002f04 <__ssputs_r+0x8c>
 8002eb4:	4629      	mov	r1, r5
 8002eb6:	f7ff ff53 	bl	8002d60 <_malloc_r>
 8002eba:	4606      	mov	r6, r0
 8002ebc:	b360      	cbz	r0, 8002f18 <__ssputs_r+0xa0>
 8002ebe:	464a      	mov	r2, r9
 8002ec0:	6921      	ldr	r1, [r4, #16]
 8002ec2:	f000 fafd 	bl	80034c0 <memcpy>
 8002ec6:	89a3      	ldrh	r3, [r4, #12]
 8002ec8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ed0:	81a3      	strh	r3, [r4, #12]
 8002ed2:	6126      	str	r6, [r4, #16]
 8002ed4:	444e      	add	r6, r9
 8002ed6:	6026      	str	r6, [r4, #0]
 8002ed8:	463e      	mov	r6, r7
 8002eda:	6165      	str	r5, [r4, #20]
 8002edc:	eba5 0509 	sub.w	r5, r5, r9
 8002ee0:	60a5      	str	r5, [r4, #8]
 8002ee2:	42be      	cmp	r6, r7
 8002ee4:	d900      	bls.n	8002ee8 <__ssputs_r+0x70>
 8002ee6:	463e      	mov	r6, r7
 8002ee8:	4632      	mov	r2, r6
 8002eea:	4641      	mov	r1, r8
 8002eec:	6820      	ldr	r0, [r4, #0]
 8002eee:	f000 faaf 	bl	8003450 <memmove>
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	68a3      	ldr	r3, [r4, #8]
 8002ef6:	1b9b      	subs	r3, r3, r6
 8002ef8:	60a3      	str	r3, [r4, #8]
 8002efa:	6823      	ldr	r3, [r4, #0]
 8002efc:	4433      	add	r3, r6
 8002efe:	6023      	str	r3, [r4, #0]
 8002f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f04:	462a      	mov	r2, r5
 8002f06:	f000 fae9 	bl	80034dc <_realloc_r>
 8002f0a:	4606      	mov	r6, r0
 8002f0c:	2800      	cmp	r0, #0
 8002f0e:	d1e0      	bne.n	8002ed2 <__ssputs_r+0x5a>
 8002f10:	4650      	mov	r0, sl
 8002f12:	6921      	ldr	r1, [r4, #16]
 8002f14:	f7ff febc 	bl	8002c90 <_free_r>
 8002f18:	230c      	movs	r3, #12
 8002f1a:	f8ca 3000 	str.w	r3, [sl]
 8002f1e:	89a3      	ldrh	r3, [r4, #12]
 8002f20:	f04f 30ff 	mov.w	r0, #4294967295
 8002f24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f28:	81a3      	strh	r3, [r4, #12]
 8002f2a:	e7e9      	b.n	8002f00 <__ssputs_r+0x88>

08002f2c <_svfiprintf_r>:
 8002f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f30:	4698      	mov	r8, r3
 8002f32:	898b      	ldrh	r3, [r1, #12]
 8002f34:	4607      	mov	r7, r0
 8002f36:	061b      	lsls	r3, r3, #24
 8002f38:	460d      	mov	r5, r1
 8002f3a:	4614      	mov	r4, r2
 8002f3c:	b09d      	sub	sp, #116	; 0x74
 8002f3e:	d50e      	bpl.n	8002f5e <_svfiprintf_r+0x32>
 8002f40:	690b      	ldr	r3, [r1, #16]
 8002f42:	b963      	cbnz	r3, 8002f5e <_svfiprintf_r+0x32>
 8002f44:	2140      	movs	r1, #64	; 0x40
 8002f46:	f7ff ff0b 	bl	8002d60 <_malloc_r>
 8002f4a:	6028      	str	r0, [r5, #0]
 8002f4c:	6128      	str	r0, [r5, #16]
 8002f4e:	b920      	cbnz	r0, 8002f5a <_svfiprintf_r+0x2e>
 8002f50:	230c      	movs	r3, #12
 8002f52:	603b      	str	r3, [r7, #0]
 8002f54:	f04f 30ff 	mov.w	r0, #4294967295
 8002f58:	e0d0      	b.n	80030fc <_svfiprintf_r+0x1d0>
 8002f5a:	2340      	movs	r3, #64	; 0x40
 8002f5c:	616b      	str	r3, [r5, #20]
 8002f5e:	2300      	movs	r3, #0
 8002f60:	9309      	str	r3, [sp, #36]	; 0x24
 8002f62:	2320      	movs	r3, #32
 8002f64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f68:	2330      	movs	r3, #48	; 0x30
 8002f6a:	f04f 0901 	mov.w	r9, #1
 8002f6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f72:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003114 <_svfiprintf_r+0x1e8>
 8002f76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f7a:	4623      	mov	r3, r4
 8002f7c:	469a      	mov	sl, r3
 8002f7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f82:	b10a      	cbz	r2, 8002f88 <_svfiprintf_r+0x5c>
 8002f84:	2a25      	cmp	r2, #37	; 0x25
 8002f86:	d1f9      	bne.n	8002f7c <_svfiprintf_r+0x50>
 8002f88:	ebba 0b04 	subs.w	fp, sl, r4
 8002f8c:	d00b      	beq.n	8002fa6 <_svfiprintf_r+0x7a>
 8002f8e:	465b      	mov	r3, fp
 8002f90:	4622      	mov	r2, r4
 8002f92:	4629      	mov	r1, r5
 8002f94:	4638      	mov	r0, r7
 8002f96:	f7ff ff6f 	bl	8002e78 <__ssputs_r>
 8002f9a:	3001      	adds	r0, #1
 8002f9c:	f000 80a9 	beq.w	80030f2 <_svfiprintf_r+0x1c6>
 8002fa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002fa2:	445a      	add	r2, fp
 8002fa4:	9209      	str	r2, [sp, #36]	; 0x24
 8002fa6:	f89a 3000 	ldrb.w	r3, [sl]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 80a1 	beq.w	80030f2 <_svfiprintf_r+0x1c6>
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002fba:	f10a 0a01 	add.w	sl, sl, #1
 8002fbe:	9304      	str	r3, [sp, #16]
 8002fc0:	9307      	str	r3, [sp, #28]
 8002fc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002fc6:	931a      	str	r3, [sp, #104]	; 0x68
 8002fc8:	4654      	mov	r4, sl
 8002fca:	2205      	movs	r2, #5
 8002fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fd0:	4850      	ldr	r0, [pc, #320]	; (8003114 <_svfiprintf_r+0x1e8>)
 8002fd2:	f000 fa67 	bl	80034a4 <memchr>
 8002fd6:	9a04      	ldr	r2, [sp, #16]
 8002fd8:	b9d8      	cbnz	r0, 8003012 <_svfiprintf_r+0xe6>
 8002fda:	06d0      	lsls	r0, r2, #27
 8002fdc:	bf44      	itt	mi
 8002fde:	2320      	movmi	r3, #32
 8002fe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002fe4:	0711      	lsls	r1, r2, #28
 8002fe6:	bf44      	itt	mi
 8002fe8:	232b      	movmi	r3, #43	; 0x2b
 8002fea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002fee:	f89a 3000 	ldrb.w	r3, [sl]
 8002ff2:	2b2a      	cmp	r3, #42	; 0x2a
 8002ff4:	d015      	beq.n	8003022 <_svfiprintf_r+0xf6>
 8002ff6:	4654      	mov	r4, sl
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	f04f 0c0a 	mov.w	ip, #10
 8002ffe:	9a07      	ldr	r2, [sp, #28]
 8003000:	4621      	mov	r1, r4
 8003002:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003006:	3b30      	subs	r3, #48	; 0x30
 8003008:	2b09      	cmp	r3, #9
 800300a:	d94d      	bls.n	80030a8 <_svfiprintf_r+0x17c>
 800300c:	b1b0      	cbz	r0, 800303c <_svfiprintf_r+0x110>
 800300e:	9207      	str	r2, [sp, #28]
 8003010:	e014      	b.n	800303c <_svfiprintf_r+0x110>
 8003012:	eba0 0308 	sub.w	r3, r0, r8
 8003016:	fa09 f303 	lsl.w	r3, r9, r3
 800301a:	4313      	orrs	r3, r2
 800301c:	46a2      	mov	sl, r4
 800301e:	9304      	str	r3, [sp, #16]
 8003020:	e7d2      	b.n	8002fc8 <_svfiprintf_r+0x9c>
 8003022:	9b03      	ldr	r3, [sp, #12]
 8003024:	1d19      	adds	r1, r3, #4
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	9103      	str	r1, [sp, #12]
 800302a:	2b00      	cmp	r3, #0
 800302c:	bfbb      	ittet	lt
 800302e:	425b      	neglt	r3, r3
 8003030:	f042 0202 	orrlt.w	r2, r2, #2
 8003034:	9307      	strge	r3, [sp, #28]
 8003036:	9307      	strlt	r3, [sp, #28]
 8003038:	bfb8      	it	lt
 800303a:	9204      	strlt	r2, [sp, #16]
 800303c:	7823      	ldrb	r3, [r4, #0]
 800303e:	2b2e      	cmp	r3, #46	; 0x2e
 8003040:	d10c      	bne.n	800305c <_svfiprintf_r+0x130>
 8003042:	7863      	ldrb	r3, [r4, #1]
 8003044:	2b2a      	cmp	r3, #42	; 0x2a
 8003046:	d134      	bne.n	80030b2 <_svfiprintf_r+0x186>
 8003048:	9b03      	ldr	r3, [sp, #12]
 800304a:	3402      	adds	r4, #2
 800304c:	1d1a      	adds	r2, r3, #4
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	9203      	str	r2, [sp, #12]
 8003052:	2b00      	cmp	r3, #0
 8003054:	bfb8      	it	lt
 8003056:	f04f 33ff 	movlt.w	r3, #4294967295
 800305a:	9305      	str	r3, [sp, #20]
 800305c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003118 <_svfiprintf_r+0x1ec>
 8003060:	2203      	movs	r2, #3
 8003062:	4650      	mov	r0, sl
 8003064:	7821      	ldrb	r1, [r4, #0]
 8003066:	f000 fa1d 	bl	80034a4 <memchr>
 800306a:	b138      	cbz	r0, 800307c <_svfiprintf_r+0x150>
 800306c:	2240      	movs	r2, #64	; 0x40
 800306e:	9b04      	ldr	r3, [sp, #16]
 8003070:	eba0 000a 	sub.w	r0, r0, sl
 8003074:	4082      	lsls	r2, r0
 8003076:	4313      	orrs	r3, r2
 8003078:	3401      	adds	r4, #1
 800307a:	9304      	str	r3, [sp, #16]
 800307c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003080:	2206      	movs	r2, #6
 8003082:	4826      	ldr	r0, [pc, #152]	; (800311c <_svfiprintf_r+0x1f0>)
 8003084:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003088:	f000 fa0c 	bl	80034a4 <memchr>
 800308c:	2800      	cmp	r0, #0
 800308e:	d038      	beq.n	8003102 <_svfiprintf_r+0x1d6>
 8003090:	4b23      	ldr	r3, [pc, #140]	; (8003120 <_svfiprintf_r+0x1f4>)
 8003092:	bb1b      	cbnz	r3, 80030dc <_svfiprintf_r+0x1b0>
 8003094:	9b03      	ldr	r3, [sp, #12]
 8003096:	3307      	adds	r3, #7
 8003098:	f023 0307 	bic.w	r3, r3, #7
 800309c:	3308      	adds	r3, #8
 800309e:	9303      	str	r3, [sp, #12]
 80030a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030a2:	4433      	add	r3, r6
 80030a4:	9309      	str	r3, [sp, #36]	; 0x24
 80030a6:	e768      	b.n	8002f7a <_svfiprintf_r+0x4e>
 80030a8:	460c      	mov	r4, r1
 80030aa:	2001      	movs	r0, #1
 80030ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80030b0:	e7a6      	b.n	8003000 <_svfiprintf_r+0xd4>
 80030b2:	2300      	movs	r3, #0
 80030b4:	f04f 0c0a 	mov.w	ip, #10
 80030b8:	4619      	mov	r1, r3
 80030ba:	3401      	adds	r4, #1
 80030bc:	9305      	str	r3, [sp, #20]
 80030be:	4620      	mov	r0, r4
 80030c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80030c4:	3a30      	subs	r2, #48	; 0x30
 80030c6:	2a09      	cmp	r2, #9
 80030c8:	d903      	bls.n	80030d2 <_svfiprintf_r+0x1a6>
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0c6      	beq.n	800305c <_svfiprintf_r+0x130>
 80030ce:	9105      	str	r1, [sp, #20]
 80030d0:	e7c4      	b.n	800305c <_svfiprintf_r+0x130>
 80030d2:	4604      	mov	r4, r0
 80030d4:	2301      	movs	r3, #1
 80030d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80030da:	e7f0      	b.n	80030be <_svfiprintf_r+0x192>
 80030dc:	ab03      	add	r3, sp, #12
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	462a      	mov	r2, r5
 80030e2:	4638      	mov	r0, r7
 80030e4:	4b0f      	ldr	r3, [pc, #60]	; (8003124 <_svfiprintf_r+0x1f8>)
 80030e6:	a904      	add	r1, sp, #16
 80030e8:	f3af 8000 	nop.w
 80030ec:	1c42      	adds	r2, r0, #1
 80030ee:	4606      	mov	r6, r0
 80030f0:	d1d6      	bne.n	80030a0 <_svfiprintf_r+0x174>
 80030f2:	89ab      	ldrh	r3, [r5, #12]
 80030f4:	065b      	lsls	r3, r3, #25
 80030f6:	f53f af2d 	bmi.w	8002f54 <_svfiprintf_r+0x28>
 80030fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030fc:	b01d      	add	sp, #116	; 0x74
 80030fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003102:	ab03      	add	r3, sp, #12
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	462a      	mov	r2, r5
 8003108:	4638      	mov	r0, r7
 800310a:	4b06      	ldr	r3, [pc, #24]	; (8003124 <_svfiprintf_r+0x1f8>)
 800310c:	a904      	add	r1, sp, #16
 800310e:	f000 f87d 	bl	800320c <_printf_i>
 8003112:	e7eb      	b.n	80030ec <_svfiprintf_r+0x1c0>
 8003114:	08003662 	.word	0x08003662
 8003118:	08003668 	.word	0x08003668
 800311c:	0800366c 	.word	0x0800366c
 8003120:	00000000 	.word	0x00000000
 8003124:	08002e79 	.word	0x08002e79

08003128 <_printf_common>:
 8003128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800312c:	4616      	mov	r6, r2
 800312e:	4699      	mov	r9, r3
 8003130:	688a      	ldr	r2, [r1, #8]
 8003132:	690b      	ldr	r3, [r1, #16]
 8003134:	4607      	mov	r7, r0
 8003136:	4293      	cmp	r3, r2
 8003138:	bfb8      	it	lt
 800313a:	4613      	movlt	r3, r2
 800313c:	6033      	str	r3, [r6, #0]
 800313e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003142:	460c      	mov	r4, r1
 8003144:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003148:	b10a      	cbz	r2, 800314e <_printf_common+0x26>
 800314a:	3301      	adds	r3, #1
 800314c:	6033      	str	r3, [r6, #0]
 800314e:	6823      	ldr	r3, [r4, #0]
 8003150:	0699      	lsls	r1, r3, #26
 8003152:	bf42      	ittt	mi
 8003154:	6833      	ldrmi	r3, [r6, #0]
 8003156:	3302      	addmi	r3, #2
 8003158:	6033      	strmi	r3, [r6, #0]
 800315a:	6825      	ldr	r5, [r4, #0]
 800315c:	f015 0506 	ands.w	r5, r5, #6
 8003160:	d106      	bne.n	8003170 <_printf_common+0x48>
 8003162:	f104 0a19 	add.w	sl, r4, #25
 8003166:	68e3      	ldr	r3, [r4, #12]
 8003168:	6832      	ldr	r2, [r6, #0]
 800316a:	1a9b      	subs	r3, r3, r2
 800316c:	42ab      	cmp	r3, r5
 800316e:	dc2b      	bgt.n	80031c8 <_printf_common+0xa0>
 8003170:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003174:	1e13      	subs	r3, r2, #0
 8003176:	6822      	ldr	r2, [r4, #0]
 8003178:	bf18      	it	ne
 800317a:	2301      	movne	r3, #1
 800317c:	0692      	lsls	r2, r2, #26
 800317e:	d430      	bmi.n	80031e2 <_printf_common+0xba>
 8003180:	4649      	mov	r1, r9
 8003182:	4638      	mov	r0, r7
 8003184:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003188:	47c0      	blx	r8
 800318a:	3001      	adds	r0, #1
 800318c:	d023      	beq.n	80031d6 <_printf_common+0xae>
 800318e:	6823      	ldr	r3, [r4, #0]
 8003190:	6922      	ldr	r2, [r4, #16]
 8003192:	f003 0306 	and.w	r3, r3, #6
 8003196:	2b04      	cmp	r3, #4
 8003198:	bf14      	ite	ne
 800319a:	2500      	movne	r5, #0
 800319c:	6833      	ldreq	r3, [r6, #0]
 800319e:	f04f 0600 	mov.w	r6, #0
 80031a2:	bf08      	it	eq
 80031a4:	68e5      	ldreq	r5, [r4, #12]
 80031a6:	f104 041a 	add.w	r4, r4, #26
 80031aa:	bf08      	it	eq
 80031ac:	1aed      	subeq	r5, r5, r3
 80031ae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80031b2:	bf08      	it	eq
 80031b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80031b8:	4293      	cmp	r3, r2
 80031ba:	bfc4      	itt	gt
 80031bc:	1a9b      	subgt	r3, r3, r2
 80031be:	18ed      	addgt	r5, r5, r3
 80031c0:	42b5      	cmp	r5, r6
 80031c2:	d11a      	bne.n	80031fa <_printf_common+0xd2>
 80031c4:	2000      	movs	r0, #0
 80031c6:	e008      	b.n	80031da <_printf_common+0xb2>
 80031c8:	2301      	movs	r3, #1
 80031ca:	4652      	mov	r2, sl
 80031cc:	4649      	mov	r1, r9
 80031ce:	4638      	mov	r0, r7
 80031d0:	47c0      	blx	r8
 80031d2:	3001      	adds	r0, #1
 80031d4:	d103      	bne.n	80031de <_printf_common+0xb6>
 80031d6:	f04f 30ff 	mov.w	r0, #4294967295
 80031da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031de:	3501      	adds	r5, #1
 80031e0:	e7c1      	b.n	8003166 <_printf_common+0x3e>
 80031e2:	2030      	movs	r0, #48	; 0x30
 80031e4:	18e1      	adds	r1, r4, r3
 80031e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031ea:	1c5a      	adds	r2, r3, #1
 80031ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031f0:	4422      	add	r2, r4
 80031f2:	3302      	adds	r3, #2
 80031f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031f8:	e7c2      	b.n	8003180 <_printf_common+0x58>
 80031fa:	2301      	movs	r3, #1
 80031fc:	4622      	mov	r2, r4
 80031fe:	4649      	mov	r1, r9
 8003200:	4638      	mov	r0, r7
 8003202:	47c0      	blx	r8
 8003204:	3001      	adds	r0, #1
 8003206:	d0e6      	beq.n	80031d6 <_printf_common+0xae>
 8003208:	3601      	adds	r6, #1
 800320a:	e7d9      	b.n	80031c0 <_printf_common+0x98>

0800320c <_printf_i>:
 800320c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003210:	7e0f      	ldrb	r7, [r1, #24]
 8003212:	4691      	mov	r9, r2
 8003214:	2f78      	cmp	r7, #120	; 0x78
 8003216:	4680      	mov	r8, r0
 8003218:	460c      	mov	r4, r1
 800321a:	469a      	mov	sl, r3
 800321c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800321e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003222:	d807      	bhi.n	8003234 <_printf_i+0x28>
 8003224:	2f62      	cmp	r7, #98	; 0x62
 8003226:	d80a      	bhi.n	800323e <_printf_i+0x32>
 8003228:	2f00      	cmp	r7, #0
 800322a:	f000 80d5 	beq.w	80033d8 <_printf_i+0x1cc>
 800322e:	2f58      	cmp	r7, #88	; 0x58
 8003230:	f000 80c1 	beq.w	80033b6 <_printf_i+0x1aa>
 8003234:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003238:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800323c:	e03a      	b.n	80032b4 <_printf_i+0xa8>
 800323e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003242:	2b15      	cmp	r3, #21
 8003244:	d8f6      	bhi.n	8003234 <_printf_i+0x28>
 8003246:	a101      	add	r1, pc, #4	; (adr r1, 800324c <_printf_i+0x40>)
 8003248:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800324c:	080032a5 	.word	0x080032a5
 8003250:	080032b9 	.word	0x080032b9
 8003254:	08003235 	.word	0x08003235
 8003258:	08003235 	.word	0x08003235
 800325c:	08003235 	.word	0x08003235
 8003260:	08003235 	.word	0x08003235
 8003264:	080032b9 	.word	0x080032b9
 8003268:	08003235 	.word	0x08003235
 800326c:	08003235 	.word	0x08003235
 8003270:	08003235 	.word	0x08003235
 8003274:	08003235 	.word	0x08003235
 8003278:	080033bf 	.word	0x080033bf
 800327c:	080032e5 	.word	0x080032e5
 8003280:	08003379 	.word	0x08003379
 8003284:	08003235 	.word	0x08003235
 8003288:	08003235 	.word	0x08003235
 800328c:	080033e1 	.word	0x080033e1
 8003290:	08003235 	.word	0x08003235
 8003294:	080032e5 	.word	0x080032e5
 8003298:	08003235 	.word	0x08003235
 800329c:	08003235 	.word	0x08003235
 80032a0:	08003381 	.word	0x08003381
 80032a4:	682b      	ldr	r3, [r5, #0]
 80032a6:	1d1a      	adds	r2, r3, #4
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	602a      	str	r2, [r5, #0]
 80032ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80032b4:	2301      	movs	r3, #1
 80032b6:	e0a0      	b.n	80033fa <_printf_i+0x1ee>
 80032b8:	6820      	ldr	r0, [r4, #0]
 80032ba:	682b      	ldr	r3, [r5, #0]
 80032bc:	0607      	lsls	r7, r0, #24
 80032be:	f103 0104 	add.w	r1, r3, #4
 80032c2:	6029      	str	r1, [r5, #0]
 80032c4:	d501      	bpl.n	80032ca <_printf_i+0xbe>
 80032c6:	681e      	ldr	r6, [r3, #0]
 80032c8:	e003      	b.n	80032d2 <_printf_i+0xc6>
 80032ca:	0646      	lsls	r6, r0, #25
 80032cc:	d5fb      	bpl.n	80032c6 <_printf_i+0xba>
 80032ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 80032d2:	2e00      	cmp	r6, #0
 80032d4:	da03      	bge.n	80032de <_printf_i+0xd2>
 80032d6:	232d      	movs	r3, #45	; 0x2d
 80032d8:	4276      	negs	r6, r6
 80032da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032de:	230a      	movs	r3, #10
 80032e0:	4859      	ldr	r0, [pc, #356]	; (8003448 <_printf_i+0x23c>)
 80032e2:	e012      	b.n	800330a <_printf_i+0xfe>
 80032e4:	682b      	ldr	r3, [r5, #0]
 80032e6:	6820      	ldr	r0, [r4, #0]
 80032e8:	1d19      	adds	r1, r3, #4
 80032ea:	6029      	str	r1, [r5, #0]
 80032ec:	0605      	lsls	r5, r0, #24
 80032ee:	d501      	bpl.n	80032f4 <_printf_i+0xe8>
 80032f0:	681e      	ldr	r6, [r3, #0]
 80032f2:	e002      	b.n	80032fa <_printf_i+0xee>
 80032f4:	0641      	lsls	r1, r0, #25
 80032f6:	d5fb      	bpl.n	80032f0 <_printf_i+0xe4>
 80032f8:	881e      	ldrh	r6, [r3, #0]
 80032fa:	2f6f      	cmp	r7, #111	; 0x6f
 80032fc:	bf0c      	ite	eq
 80032fe:	2308      	moveq	r3, #8
 8003300:	230a      	movne	r3, #10
 8003302:	4851      	ldr	r0, [pc, #324]	; (8003448 <_printf_i+0x23c>)
 8003304:	2100      	movs	r1, #0
 8003306:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800330a:	6865      	ldr	r5, [r4, #4]
 800330c:	2d00      	cmp	r5, #0
 800330e:	bfa8      	it	ge
 8003310:	6821      	ldrge	r1, [r4, #0]
 8003312:	60a5      	str	r5, [r4, #8]
 8003314:	bfa4      	itt	ge
 8003316:	f021 0104 	bicge.w	r1, r1, #4
 800331a:	6021      	strge	r1, [r4, #0]
 800331c:	b90e      	cbnz	r6, 8003322 <_printf_i+0x116>
 800331e:	2d00      	cmp	r5, #0
 8003320:	d04b      	beq.n	80033ba <_printf_i+0x1ae>
 8003322:	4615      	mov	r5, r2
 8003324:	fbb6 f1f3 	udiv	r1, r6, r3
 8003328:	fb03 6711 	mls	r7, r3, r1, r6
 800332c:	5dc7      	ldrb	r7, [r0, r7]
 800332e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003332:	4637      	mov	r7, r6
 8003334:	42bb      	cmp	r3, r7
 8003336:	460e      	mov	r6, r1
 8003338:	d9f4      	bls.n	8003324 <_printf_i+0x118>
 800333a:	2b08      	cmp	r3, #8
 800333c:	d10b      	bne.n	8003356 <_printf_i+0x14a>
 800333e:	6823      	ldr	r3, [r4, #0]
 8003340:	07de      	lsls	r6, r3, #31
 8003342:	d508      	bpl.n	8003356 <_printf_i+0x14a>
 8003344:	6923      	ldr	r3, [r4, #16]
 8003346:	6861      	ldr	r1, [r4, #4]
 8003348:	4299      	cmp	r1, r3
 800334a:	bfde      	ittt	le
 800334c:	2330      	movle	r3, #48	; 0x30
 800334e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003352:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003356:	1b52      	subs	r2, r2, r5
 8003358:	6122      	str	r2, [r4, #16]
 800335a:	464b      	mov	r3, r9
 800335c:	4621      	mov	r1, r4
 800335e:	4640      	mov	r0, r8
 8003360:	f8cd a000 	str.w	sl, [sp]
 8003364:	aa03      	add	r2, sp, #12
 8003366:	f7ff fedf 	bl	8003128 <_printf_common>
 800336a:	3001      	adds	r0, #1
 800336c:	d14a      	bne.n	8003404 <_printf_i+0x1f8>
 800336e:	f04f 30ff 	mov.w	r0, #4294967295
 8003372:	b004      	add	sp, #16
 8003374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003378:	6823      	ldr	r3, [r4, #0]
 800337a:	f043 0320 	orr.w	r3, r3, #32
 800337e:	6023      	str	r3, [r4, #0]
 8003380:	2778      	movs	r7, #120	; 0x78
 8003382:	4832      	ldr	r0, [pc, #200]	; (800344c <_printf_i+0x240>)
 8003384:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003388:	6823      	ldr	r3, [r4, #0]
 800338a:	6829      	ldr	r1, [r5, #0]
 800338c:	061f      	lsls	r7, r3, #24
 800338e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003392:	d402      	bmi.n	800339a <_printf_i+0x18e>
 8003394:	065f      	lsls	r7, r3, #25
 8003396:	bf48      	it	mi
 8003398:	b2b6      	uxthmi	r6, r6
 800339a:	07df      	lsls	r7, r3, #31
 800339c:	bf48      	it	mi
 800339e:	f043 0320 	orrmi.w	r3, r3, #32
 80033a2:	6029      	str	r1, [r5, #0]
 80033a4:	bf48      	it	mi
 80033a6:	6023      	strmi	r3, [r4, #0]
 80033a8:	b91e      	cbnz	r6, 80033b2 <_printf_i+0x1a6>
 80033aa:	6823      	ldr	r3, [r4, #0]
 80033ac:	f023 0320 	bic.w	r3, r3, #32
 80033b0:	6023      	str	r3, [r4, #0]
 80033b2:	2310      	movs	r3, #16
 80033b4:	e7a6      	b.n	8003304 <_printf_i+0xf8>
 80033b6:	4824      	ldr	r0, [pc, #144]	; (8003448 <_printf_i+0x23c>)
 80033b8:	e7e4      	b.n	8003384 <_printf_i+0x178>
 80033ba:	4615      	mov	r5, r2
 80033bc:	e7bd      	b.n	800333a <_printf_i+0x12e>
 80033be:	682b      	ldr	r3, [r5, #0]
 80033c0:	6826      	ldr	r6, [r4, #0]
 80033c2:	1d18      	adds	r0, r3, #4
 80033c4:	6961      	ldr	r1, [r4, #20]
 80033c6:	6028      	str	r0, [r5, #0]
 80033c8:	0635      	lsls	r5, r6, #24
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	d501      	bpl.n	80033d2 <_printf_i+0x1c6>
 80033ce:	6019      	str	r1, [r3, #0]
 80033d0:	e002      	b.n	80033d8 <_printf_i+0x1cc>
 80033d2:	0670      	lsls	r0, r6, #25
 80033d4:	d5fb      	bpl.n	80033ce <_printf_i+0x1c2>
 80033d6:	8019      	strh	r1, [r3, #0]
 80033d8:	2300      	movs	r3, #0
 80033da:	4615      	mov	r5, r2
 80033dc:	6123      	str	r3, [r4, #16]
 80033de:	e7bc      	b.n	800335a <_printf_i+0x14e>
 80033e0:	682b      	ldr	r3, [r5, #0]
 80033e2:	2100      	movs	r1, #0
 80033e4:	1d1a      	adds	r2, r3, #4
 80033e6:	602a      	str	r2, [r5, #0]
 80033e8:	681d      	ldr	r5, [r3, #0]
 80033ea:	6862      	ldr	r2, [r4, #4]
 80033ec:	4628      	mov	r0, r5
 80033ee:	f000 f859 	bl	80034a4 <memchr>
 80033f2:	b108      	cbz	r0, 80033f8 <_printf_i+0x1ec>
 80033f4:	1b40      	subs	r0, r0, r5
 80033f6:	6060      	str	r0, [r4, #4]
 80033f8:	6863      	ldr	r3, [r4, #4]
 80033fa:	6123      	str	r3, [r4, #16]
 80033fc:	2300      	movs	r3, #0
 80033fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003402:	e7aa      	b.n	800335a <_printf_i+0x14e>
 8003404:	462a      	mov	r2, r5
 8003406:	4649      	mov	r1, r9
 8003408:	4640      	mov	r0, r8
 800340a:	6923      	ldr	r3, [r4, #16]
 800340c:	47d0      	blx	sl
 800340e:	3001      	adds	r0, #1
 8003410:	d0ad      	beq.n	800336e <_printf_i+0x162>
 8003412:	6823      	ldr	r3, [r4, #0]
 8003414:	079b      	lsls	r3, r3, #30
 8003416:	d413      	bmi.n	8003440 <_printf_i+0x234>
 8003418:	68e0      	ldr	r0, [r4, #12]
 800341a:	9b03      	ldr	r3, [sp, #12]
 800341c:	4298      	cmp	r0, r3
 800341e:	bfb8      	it	lt
 8003420:	4618      	movlt	r0, r3
 8003422:	e7a6      	b.n	8003372 <_printf_i+0x166>
 8003424:	2301      	movs	r3, #1
 8003426:	4632      	mov	r2, r6
 8003428:	4649      	mov	r1, r9
 800342a:	4640      	mov	r0, r8
 800342c:	47d0      	blx	sl
 800342e:	3001      	adds	r0, #1
 8003430:	d09d      	beq.n	800336e <_printf_i+0x162>
 8003432:	3501      	adds	r5, #1
 8003434:	68e3      	ldr	r3, [r4, #12]
 8003436:	9903      	ldr	r1, [sp, #12]
 8003438:	1a5b      	subs	r3, r3, r1
 800343a:	42ab      	cmp	r3, r5
 800343c:	dcf2      	bgt.n	8003424 <_printf_i+0x218>
 800343e:	e7eb      	b.n	8003418 <_printf_i+0x20c>
 8003440:	2500      	movs	r5, #0
 8003442:	f104 0619 	add.w	r6, r4, #25
 8003446:	e7f5      	b.n	8003434 <_printf_i+0x228>
 8003448:	08003673 	.word	0x08003673
 800344c:	08003684 	.word	0x08003684

08003450 <memmove>:
 8003450:	4288      	cmp	r0, r1
 8003452:	b510      	push	{r4, lr}
 8003454:	eb01 0402 	add.w	r4, r1, r2
 8003458:	d902      	bls.n	8003460 <memmove+0x10>
 800345a:	4284      	cmp	r4, r0
 800345c:	4623      	mov	r3, r4
 800345e:	d807      	bhi.n	8003470 <memmove+0x20>
 8003460:	1e43      	subs	r3, r0, #1
 8003462:	42a1      	cmp	r1, r4
 8003464:	d008      	beq.n	8003478 <memmove+0x28>
 8003466:	f811 2b01 	ldrb.w	r2, [r1], #1
 800346a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800346e:	e7f8      	b.n	8003462 <memmove+0x12>
 8003470:	4601      	mov	r1, r0
 8003472:	4402      	add	r2, r0
 8003474:	428a      	cmp	r2, r1
 8003476:	d100      	bne.n	800347a <memmove+0x2a>
 8003478:	bd10      	pop	{r4, pc}
 800347a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800347e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003482:	e7f7      	b.n	8003474 <memmove+0x24>

08003484 <_sbrk_r>:
 8003484:	b538      	push	{r3, r4, r5, lr}
 8003486:	2300      	movs	r3, #0
 8003488:	4d05      	ldr	r5, [pc, #20]	; (80034a0 <_sbrk_r+0x1c>)
 800348a:	4604      	mov	r4, r0
 800348c:	4608      	mov	r0, r1
 800348e:	602b      	str	r3, [r5, #0]
 8003490:	f7fd ff82 	bl	8001398 <_sbrk>
 8003494:	1c43      	adds	r3, r0, #1
 8003496:	d102      	bne.n	800349e <_sbrk_r+0x1a>
 8003498:	682b      	ldr	r3, [r5, #0]
 800349a:	b103      	cbz	r3, 800349e <_sbrk_r+0x1a>
 800349c:	6023      	str	r3, [r4, #0]
 800349e:	bd38      	pop	{r3, r4, r5, pc}
 80034a0:	2000024c 	.word	0x2000024c

080034a4 <memchr>:
 80034a4:	4603      	mov	r3, r0
 80034a6:	b510      	push	{r4, lr}
 80034a8:	b2c9      	uxtb	r1, r1
 80034aa:	4402      	add	r2, r0
 80034ac:	4293      	cmp	r3, r2
 80034ae:	4618      	mov	r0, r3
 80034b0:	d101      	bne.n	80034b6 <memchr+0x12>
 80034b2:	2000      	movs	r0, #0
 80034b4:	e003      	b.n	80034be <memchr+0x1a>
 80034b6:	7804      	ldrb	r4, [r0, #0]
 80034b8:	3301      	adds	r3, #1
 80034ba:	428c      	cmp	r4, r1
 80034bc:	d1f6      	bne.n	80034ac <memchr+0x8>
 80034be:	bd10      	pop	{r4, pc}

080034c0 <memcpy>:
 80034c0:	440a      	add	r2, r1
 80034c2:	4291      	cmp	r1, r2
 80034c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80034c8:	d100      	bne.n	80034cc <memcpy+0xc>
 80034ca:	4770      	bx	lr
 80034cc:	b510      	push	{r4, lr}
 80034ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034d2:	4291      	cmp	r1, r2
 80034d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80034d8:	d1f9      	bne.n	80034ce <memcpy+0xe>
 80034da:	bd10      	pop	{r4, pc}

080034dc <_realloc_r>:
 80034dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034e0:	4680      	mov	r8, r0
 80034e2:	4614      	mov	r4, r2
 80034e4:	460e      	mov	r6, r1
 80034e6:	b921      	cbnz	r1, 80034f2 <_realloc_r+0x16>
 80034e8:	4611      	mov	r1, r2
 80034ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034ee:	f7ff bc37 	b.w	8002d60 <_malloc_r>
 80034f2:	b92a      	cbnz	r2, 8003500 <_realloc_r+0x24>
 80034f4:	f7ff fbcc 	bl	8002c90 <_free_r>
 80034f8:	4625      	mov	r5, r4
 80034fa:	4628      	mov	r0, r5
 80034fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003500:	f000 f81b 	bl	800353a <_malloc_usable_size_r>
 8003504:	4284      	cmp	r4, r0
 8003506:	4607      	mov	r7, r0
 8003508:	d802      	bhi.n	8003510 <_realloc_r+0x34>
 800350a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800350e:	d812      	bhi.n	8003536 <_realloc_r+0x5a>
 8003510:	4621      	mov	r1, r4
 8003512:	4640      	mov	r0, r8
 8003514:	f7ff fc24 	bl	8002d60 <_malloc_r>
 8003518:	4605      	mov	r5, r0
 800351a:	2800      	cmp	r0, #0
 800351c:	d0ed      	beq.n	80034fa <_realloc_r+0x1e>
 800351e:	42bc      	cmp	r4, r7
 8003520:	4622      	mov	r2, r4
 8003522:	4631      	mov	r1, r6
 8003524:	bf28      	it	cs
 8003526:	463a      	movcs	r2, r7
 8003528:	f7ff ffca 	bl	80034c0 <memcpy>
 800352c:	4631      	mov	r1, r6
 800352e:	4640      	mov	r0, r8
 8003530:	f7ff fbae 	bl	8002c90 <_free_r>
 8003534:	e7e1      	b.n	80034fa <_realloc_r+0x1e>
 8003536:	4635      	mov	r5, r6
 8003538:	e7df      	b.n	80034fa <_realloc_r+0x1e>

0800353a <_malloc_usable_size_r>:
 800353a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800353e:	1f18      	subs	r0, r3, #4
 8003540:	2b00      	cmp	r3, #0
 8003542:	bfbc      	itt	lt
 8003544:	580b      	ldrlt	r3, [r1, r0]
 8003546:	18c0      	addlt	r0, r0, r3
 8003548:	4770      	bx	lr
	...

0800354c <_init>:
 800354c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354e:	bf00      	nop
 8003550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003552:	bc08      	pop	{r3}
 8003554:	469e      	mov	lr, r3
 8003556:	4770      	bx	lr

08003558 <_fini>:
 8003558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800355a:	bf00      	nop
 800355c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800355e:	bc08      	pop	{r3}
 8003560:	469e      	mov	lr, r3
 8003562:	4770      	bx	lr
